<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GNSS Site</title>
    <link>https://geoyxd.github.io/</link>
    <description>Recent content on GNSS Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Sat, 29 Jun 2024 08:47:50 +0800</lastBuildDate>
    
        <atom:link href="https://geoyxd.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>C#教程</title>
        <link>https://geoyxd.github.io/posts/c_sharp_learn/</link>
        <pubDate>Sat, 29 Jun 2024 08:47:50 +0800</pubDate>
        
        <guid>https://geoyxd.github.io/posts/c_sharp_learn/</guid>
        <description>GNSS Site https://geoyxd.github.io/posts/c_sharp_learn/ -&lt;h1 id=&#34;第一章--c简介&#34;&gt;第一章  C#简介&lt;/h1&gt;
&lt;h2 id=&#34;net-framework的含义&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt;的含义&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;.NET Framework&lt;/code&gt;是Microsoft为开发应用程序而创建的一个具有革命意义的平台&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以运行在多个操作系统上：&lt;code&gt;Windows&lt;/code&gt;,&lt;code&gt;Windows Mobile&lt;/code&gt;, &lt;code&gt;Linux&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;未限制应用程序的类型：&lt;code&gt;桌面应用程序&lt;/code&gt;、&lt;code&gt;Windows桌面应用程序（UWP）&lt;/code&gt;、&lt;code&gt;云/Web应用程序&lt;/code&gt;、&lt;code&gt;Web API&lt;/code&gt;、&lt;code&gt;其他各种类型的应用程序&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于Web、云和Web API应用程序，按照定义是多平台的应用程序，因为任何带有Web浏览器的系统都可以访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以用于各种语言：&lt;code&gt;C#&lt;/code&gt;, &lt;code&gt;C++&lt;/code&gt;, &lt;code&gt;F#&lt;/code&gt;, &lt;code&gt;JavaScript&lt;/code&gt;, &lt;code&gt;Visual Basic&lt;/code&gt;, &lt;code&gt;COBOL&lt;/code&gt;及其他旧语言&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;net-framework的内容&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt;的内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;``.NET Framwork&lt;code&gt;主要包含一个庞大的&lt;/code&gt;代码库`，可以在客户端或服务器语言中通过面向对象编程技术（Object-Oriented Programming, OOP）来使用这些代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块&lt;/strong&gt;：代码库分为多个不同的模块，这样就可以根据希望得到的结果来选择使用其中的各个部分，一些模块还分为更具体的子模块。主要是为了满足不同的操作系统可以根据各自的特征支持其中的部分或全部模块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通用类型系统(Common Type System, CTS)&lt;/strong&gt;：部分&lt;code&gt;.NET Framwork&lt;/code&gt;库定义了一些基本类型，类型是数据的一种表达方式，指定最基本类型有助于&lt;code&gt;.NET Framwork&lt;/code&gt;的各种语言之间进行交互操作，这称为通用类型系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;.NET 公共语言运行库(Common Language Runtime, CLR)&lt;/strong&gt;：除了基本类型库之外，``.NET Framwork`还包含.NET公共语言运行库，负责管理用.NET库开发的所有应用程序的执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;net-standard和net-core&#34;&gt;&lt;code&gt;.NET Standard&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;开源分支&lt;/strong&gt;：Github上，项目可以被分支并在多个平台上定制运行。&lt;code&gt;.NET Compact Framework&lt;/code&gt;和&lt;code&gt;.NET Micro Framework&lt;/code&gt;是&lt;code&gt;.NET Framework&lt;/code&gt;的分支，每个&lt;code&gt;.NET Framework&lt;/code&gt;的分支都有一个具体的需求和目标，正是这些需求和目标催生了对应的分支。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.NET Core&lt;/code&gt;是进行跨平台代码开发的最优化解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基类库(Base Class Libraries, BCL)&lt;/strong&gt;：&lt;code&gt;.NET Framework&lt;/code&gt;中包含一组基类库(BCL)，这些库中包含的API用于大多数开发人员需要完成的基本功能。在不同版本的&lt;code&gt;.NET Framework&lt;/code&gt;中这些功能的实现是不同的。因此需要开发人员根据应用程序运行的平台，针对对应用程序的不同分支或版本去学习、开发和管理多个基类库(BCL)。分支概念导致了更多&lt;code&gt;.NET Framework&lt;/code&gt;版本的出现，因此需要一组基本编程API来处理各种分支和版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.NET Standard&lt;/code&gt;可以解决上述问题，它是一个类库，它提供的API支持使用了&lt;code&gt;.NET Platform&lt;/code&gt;的应用程序的任何分支和版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用net-framework和net-core编写应用程序&#34;&gt;使用&lt;code&gt;.NET Framework&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;编写应用程序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实质&lt;/strong&gt;：使用&lt;code&gt;.NET Framework&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;编写应用程序就是使用支持&lt;code&gt;.NET Framework&lt;/code&gt;的任何一种语言使用&lt;code&gt;.NET代码库·&lt;/code&gt;编写代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IDE&lt;/strong&gt;：本书使用Visual Studio进行开发，是一种强大的集成开发环境，支持C#（以及托管和非托管C++，Visual Basic和其他一些语言）。这个环境的优点是便于将.NET 功能集成到代码中，我们创建的代码完全是C#代码，但是使用了&lt;code&gt;.NET Framework&lt;/code&gt;，并在需要的时候利用了Visual Studio中的其他工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;编译&lt;/strong&gt;：为了执行C#代码，必须把它们转换为目标操作系统能理解的语言，即&lt;strong&gt;本机代码(native code)&lt;/strong&gt;。这一过程叫做&lt;strong&gt;编译(compiling)代码&lt;/strong&gt;，由编译器执行。在&lt;code&gt;.NET Framework&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;下，这个过程包括两个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CIL和JIT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;.NET Framework&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;库编写的代码$\longrightarrow$通用中间语言(common Intermediate Language, CIL)$\longrightarrow$本机代码(native code)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通用中间语言(common Intermediate Language, CIL)&lt;/strong&gt;：并非专门用于任何一种操作系统，也并非专门用于C#，其他.NET语言也会在第一阶段编译为这种语言。开发C#应用程序时，这个编译步骤由Visual Studio完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Just-in-time编译器&lt;/strong&gt;：JIT负责把CIL编译为专用于OS和目标机器架构的本机代码，这样OS才能够执行应用程序&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;程序集(assembly)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编译应用程序时，所创建的CIL代码存储在一个程序集中.程序集中包括可执行的应用程序文件(&lt;code&gt;.exe&lt;/code&gt;)、其他应用程序使用的库(&lt;code&gt;.dll&lt;/code&gt;)、元信息（程序集包含的信息）、一些可选资源（CIl使用的其他数据：声音文件和图片等）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;元信息允许程序集是完全自描述的，不需要其他信息就可以使用程序集。也就是说，我们不会遇到没有把需要的数据添加到系统注册表中这样的问题，而在使用其他平台进行开发时这个问题常常会出现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署应用程序只需要把文件复制到远程计算机上，因为不需要目标系统上的其他信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;针对&lt;code&gt;.NET Framework&lt;/code&gt;的应用程序，只需要从该目录中运行可执行文件即可（假定安装了.NET CIL），而针对&lt;code&gt;.NET Core&lt;/code&gt;的应用程序，运行 该程序需要的所有模块都包含在部署包内，不需要进行其他配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全局程序集缓存(Global Assembly Cache, GAC)&lt;/strong&gt;：在&lt;code&gt;.NET Framework&lt;/code&gt;中一些代码可以被多个应用程序重用，这些可重用的代码放在所有应用程序都可以访问的地方，也就是全局程序集缓存。只需要把包含代码的程序集放在该缓存的目录下即可实现把代码放在缓存中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;托管代码&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**托管功能：**将代码编译为本机代码后，CLR/CoreCLR还需要管理正在执行的代码，方式是管理内存、处理安全性以及允许进行跨语言调试等。在C#中，我们编写的代码将使用CLR/CoreCLR的托管功能让.NET处理与操作系统的任何交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;垃圾回收&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;托管代码的最重要的功能是垃圾回收，这一.NET方法可以确保应用程序不在使用某些内存时就会完全释放这些内存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;把它们组合在一起&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用.NET兼容语言（如C#）编写&lt;em&gt;应用程序代码&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将代码编译为&lt;em&gt;CIL&lt;/em&gt;，存储在程序集中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在执行代码时（如果这是一个可执行文件就自动运行，或者在其他代码使用它时运行），首先必须使用JIT编译器将代码编译为&lt;em&gt;本机代码&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在托管的CLR/CoreCLR环境中&lt;em&gt;运行本机代码&lt;/em&gt;以及其他应用程序或进程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;链接(Linking)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在上述第2步中的C#代码未必在一个单独的文件中，可以把应用程序代码放在多个源代码文件中，再把它们编译到一个单独的程序集中，这个过程叫做链接(linking)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c的含义&#34;&gt;C#的含义&lt;/h2&gt;
&lt;p&gt;C#语言是一种类型安全的语言，在类型之间转换时，必须遵守严格的规则。执行相同的任务时，用C#编写的代码往往比C++编写的代码要长，但C#代码更加健壮，调试起来也比较简单，.NET始终可以准送数据的类型&lt;/p&gt;
&lt;h3 id=&#34;用c可以编写什么样的应用程序&#34;&gt;用C#可以编写什么样的应用程序&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.NET Framework&lt;/code&gt;没有限制应用程序的类型，C#使用的是&lt;code&gt;.NET Framework&lt;/code&gt;，因此也没有限制应用程序类型，实际上目前使用.NET Core只可以编写Console和ASP.NET应用程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;桌面应用程序：这些应用程序（如Microsoft Office）具有我们很熟悉的Windows外观和操作方式，使用.NET Framework的Windows Presentation Foundation(WPF)模块就可以简便地生成这种应用程序。WPF是一个控件库8，其中的控件（如按钮、工具栏、菜单等）而用于建立Windows用户界面(UI)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows Store应用程序：这是Windows8中引入的一类新的应用程序，此类应用程序主要针对触摸设备设计，通常全屏运行，侧重点在简洁清晰。创建这类应用程序的方式有很多种，包括使用WPF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;云/Web应用程序：&lt;code&gt;.NET Framework&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;包括一个动态生成Web内容的强大系统——ASP.NET，允许进行个性化和实现安全性等。另外，这些应用程序可以在云中驻留和访问，例如Microsoft Azure平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web API：这是建立REST风格的HTTP服务的理想框架，支持许多客户端，包括移动设备和浏览器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WCF服务：这是一种灵活创建各种分布式应用程序的方式，使用WCF服务可以通过局域网或Internet交换几乎各种数据。无论使用声明语言创建WCF服务，也无论WCF服务驻留在什么系统上，都使用一种简单的语法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些类型的应用程序也可能需要某种形式的数据库访问，这可以通过.NET Framework的Active Data Object .NET(ADO.NET)部分，ADO.NET Entity Framework或C#的LINQ(Language Integrated Query)功能来实现。对于需要数据库访问的.NET Core应用程序将使用ENtity Framework Core库。也可以使用许多其他资源。例如，创建联网组件、输出图形、执行复杂数学任务的工具来实现。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-2017&#34;&gt;Visual Studio 2017&lt;/h2&gt;
&lt;h2 id=&#34;本章要点&#34;&gt;本章要点&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;要点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;基础&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt;是Microsoft最新的开发平台，目前的版本是4.7。它包括一个公共类型库(CTS)和一个公共语言类型库(CLR/CoreCLR)。&lt;code&gt;.NET Framework&lt;/code&gt;应用程序使用面向对象编程的方法论进行编写，通常包含托管代码、托管代码的内存管理有.NET运行库处理，其中包括垃圾回收。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt;应用程序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用&lt;code&gt;.NET Framework&lt;/code&gt;编写的应用程序首先编译为CIL，在执行应用程序时，JIT把CIL编译为本机代码。应用程序编译后，把不同部分链接到包含CIL的程序集中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Core&lt;/code&gt;应用程序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Core&lt;/code&gt;应用程序的工作方式与&lt;code&gt;.NET Framework&lt;/code&gt;应用程序类似，但不使用CLR，而是使用CoreCLR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Standard&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Standard&lt;/code&gt;提供了一个统一的类库，多个.NET平台（如&lt;code&gt;.NET Framework&lt;/code&gt;,&lt;code&gt;.NET Core&lt;/code&gt;,&lt;code&gt;Xamarin&lt;/code&gt;）都可以将它作为目标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C#基础&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C#是包含在&lt;code&gt;.NET Framework&lt;/code&gt;中的一种语言，是已有语言（如C++）的一种演变，可用来编写任意应用程序，包括Web应用程序、跨平台应用程序、桌面应用程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;集成开发环境(IDE)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可在Visual Studio 2017中用C#编写任意类型的.NET应用程序，还可以子免费的但功能稍弱的Community产品中用C#创建.NET应用程序。IDE使用解决方案，解决方案可以包含多个项目。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第二章-编写c应用程序&#34;&gt;第二章 编写C#应用程序&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;要点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Visual Studio 2017设置&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;本书需要在第一次运行Visual Studio2017时厕C# Development Setting选项或者重置它们&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;控制台应用程序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;控制台应用程序是最简单的命令行应用程序，本书主要通过它来演示技术。在Visual Studio中创建新项目时，，使用Console Application模板就会创建新的控制台应用程序。要在调试模式下运行项目，可以使用“调试|开始调试”或者按下F5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IDE窗口&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;项目内容显示在项目资源管理器窗口中，所选中项的属性在属性窗口中，错误提示在错误列表中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;桌面应用程序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;桌面应用程序具备标准Windows应用程序的外观和操作方式，包括最大化、最小化和关闭应用程序等大家熟悉的图标。它们是在New Project对话框中使用WPF Application模板创建的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第三章-变量和表达式&#34;&gt;第三章 变量和表达式&lt;/h1&gt;
&lt;h2 id=&#34;c的基本语法&#34;&gt;C#的基本语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;空白字符&lt;/strong&gt;：C#编译器不考虑代码中的空格、回车符、制表符，它们统称为空白字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分号&lt;/strong&gt;：C#代码由一系列语句组成，每条语句以一个分号结束。一行可以有多条语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;块结构&lt;/strong&gt;：C#是一种块结构的语言，所有语句都是代码块的一部分。使用花括号来界定代码块，代码块中可以包含任意多行语句。代码块末尾不需要加分号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注释&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单行注释&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 这是单行注释&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多行注释&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*这是
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;多行注释
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三类注释&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;///这是第三类注释，通过配置Visual Studio可以在编译项目时提取注释后面的文本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;///创建一个特殊格式的文本文件，该文件可以用来创建文档&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;大小写敏感&lt;/strong&gt;：C#语言是严格区分大小写的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变量及其用法&#34;&gt;变量及其用法&lt;/h2&gt;
&lt;h3 id=&#34;简单类型&#34;&gt;简单类型&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;简单类型就是组成应用程序中基本构件的类型，例如数值和布尔值。与复杂类型不同，简单类型没有子类型或特性，大多数简单类型都是存储数值的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;整数类型&#34;&gt;整数类型&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;别名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;允许的值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;sbyte&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.SByte&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-128~127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;byte&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Byte&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0~255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;short&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Int16&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-32768~32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ushort&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.UInt16&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0~65535&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Int32&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-2147483648~2147483647&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;uint&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.UInt32&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0~4294967295&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;long&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Int64&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-9223372036854775808~922372036854775807&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ulong&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.UInt64&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0~18446744073709551615&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$2^8=256$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$2^{16} = 65536$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$2^{32} = 4294967296$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$2^{32} =  18446744073709551616$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些类型中的每一种都利用了&lt;code&gt;.NET Framework&lt;/code&gt;中定义的标准类型，使用标准类型可以在语言之间交互操作。在C#中这些类型的名称是Framework中定义的类型的别名。&lt;/p&gt;
&lt;h4 id=&#34;浮点类型&#34;&gt;浮点类型&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;别名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;m的最小值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;m的最大值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;e的最小值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;e的最大值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;近似的最小值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;近似的最大值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;float&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Single&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$0$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$2^{24}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$-149$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$104$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$1.5\times 10^{-45}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$3.4\times10^{38}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;double&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Double&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$0$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$2^{53}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$-1057$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$970$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$5.0\times 10^{-324}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$1.7\times 10^{308}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;decimal&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Decimal&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$0$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$2^{96}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$-28$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$0$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$1.0\times 10^{-28}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$7.9\times 10^{28}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;float和double存储浮点数的方式为$\pm m \times 2^e$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;decimal存储浮点数的方式为$\pm m\times 10^e$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文本和布尔类型&#34;&gt;文本和布尔类型&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;别名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;允许的值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;char&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Char&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;一个Unicode字符，存储在0~65535之间的整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;bool&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Boolean&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;布尔值：true或false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.String&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;一个字符序列&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;string的字符数量没有上限，因为它可以使用可变大小的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变量的命名&#34;&gt;变量的命名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变量的第一个字母必须是字符、下划线或@&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其后的字符可以是字母、下划线或数字&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字面值&#34;&gt;字面值&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类别&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;后缀&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;实例/允许的值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;bool&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;布尔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true和false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int,uint,long,ulong&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;uint,ulong&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;u,U&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;long,ulong&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;l,L&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100L&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ulong&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ul,uL,Ul,UL,lu,lU,Lu,LU&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100UL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;float&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;实数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;f,F&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.5F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;double&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;实数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无, d, D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;decimal&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;实数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;m, M&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.5M&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;char&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lsquo;a&amp;rsquo;或转义序列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字符串&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lsquo;a&amp;hellip;a&amp;rsquo;，可以包含转义序列&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;二进制字面值与数字分隔符&#34;&gt;二进制字面值与数字分隔符&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;二进制模式匹配和位掩码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C#7中的二进制字面值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] numbers = [&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] numbers  = [ob00001, ob00010, ob00100, ob01000, ob10000];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C#7中的数字分隔符&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] numbers = [&lt;span style=&#34;color:#b452cd&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;128&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] numbers = [ob0010_0000, ob0100_0000, ob1000_0000];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; Pi = &lt;span style=&#34;color:#b452cd&#34;&gt;3.141&lt;/span&gt;_592_653_589_793_238_462_643_383_279_502;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字符串字面值&#34;&gt;字符串字面值&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;字符串字面值的转义序列&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;转义序列&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;产生的字符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;字符从Unicode值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单引号&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0027&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;双引号&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\\&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;反斜杠&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x005C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;null&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\a&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;警告（产生蜂鸣）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0007&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;退格&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\f&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;换页&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x000C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\n&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;换行&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x000A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\r&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;回车&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x000D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\t&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;水平制表符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0009&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\v&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;垂直制表符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x000B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;字符的Unicode值指的是字符在Unicode字符集中的十六进制值值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转移序列包括标准的\字符后面跟一个u和一个4位十六进制值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Benjamin\&amp;#39;s string&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Benjmin\u0027s string&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;一字不变地引用字符串&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;反斜杠&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;@“&lt;/span&gt;C:&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;Users&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;srxh&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;Desktop&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;C_Sharp_Learn&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;”&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;C:\\Users\\srxh\\Desktop\\C_Sharp_Learn&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多行字符串&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;@&amp;#34;A short list；
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;item 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;item 2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;字符串是引用类型，本章中的其他类型都是值类型，所以字符串也可以被赋值为null值，表示字符串变量不引用字符串（或其他东西）&lt;/p&gt;
&lt;h2 id=&#34;表达式及其用法&#34;&gt;表达式及其用法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把操作数（变量和字面值）和运算符组合起来就可以创建表达式，它是计算的基本构件，C#中包含许多执行这类处理的运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运算符包括：数学运算符、逻辑运算符、赋值运算符、其他复杂的二进制运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预算符大致分为三类：一元运算符（几个）、二元运算符（最常见）、三元运算符（只有一个，即条件运算符）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数学运算符&#34;&gt;数学运算符&lt;/h3&gt;
&lt;h4 id=&#34;二元运算符&#34;&gt;二元运算符&lt;/h4&gt;
&lt;p&gt;$+$：数学加法，字符串连接&lt;/p&gt;
&lt;p&gt;$-$：数学减法&lt;/p&gt;
&lt;p&gt;$*$：数学乘法&lt;/p&gt;
&lt;p&gt;$/$：数学除法&lt;/p&gt;
&lt;p&gt;$%$：取余数&lt;/p&gt;
&lt;h4 id=&#34;一元运算符&#34;&gt;一元运算符&lt;/h4&gt;
&lt;p&gt;$+$：某数乘以1&lt;/p&gt;
&lt;p&gt;$-$：某数乘以-1&lt;/p&gt;
&lt;h4 id=&#34;递增和递减运算符&#34;&gt;递增和递减运算符&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 = var2 ++; &lt;span style=&#34;color:#228b22&#34;&gt;// var1值为var2, var2递增1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 = var2 --; &lt;span style=&#34;color:#228b22&#34;&gt;// var1值为var2, var2递减1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 = ++ var2; &lt;span style=&#34;color:#228b22&#34;&gt;// var1值为var2 + 1, var2递增1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 = -- var2; &lt;span style=&#34;color:#228b22&#34;&gt;// var1值为var2 - 1, var2递减1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;赋值运算符&#34;&gt;赋值运算符&lt;/h3&gt;
&lt;p&gt;$=$：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 = var2;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$-=$：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 -= var2;&lt;span style=&#34;color:#228b22&#34;&gt;// var1 = var1 - var2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$+=$：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 += var2;&lt;span style=&#34;color:#228b22&#34;&gt;// var1 = var1 + var2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$*=$：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 *= var2;&lt;span style=&#34;color:#228b22&#34;&gt;// var1 = var1 * var2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$/=$：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 /= var2;&lt;span style=&#34;color:#228b22&#34;&gt;// var1 = var1 / var2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$%=$：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 %= var2;&lt;span style=&#34;color:#228b22&#34;&gt;// var1 = var1 % var2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;运算符的优先级&#34;&gt;运算符的优先级&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;运算符由高到低&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;++, &amp;ndash;（用作前缀）；+, -（一元运算符）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*, /, %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+, -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;=, *=, /=, %=, +=, -=&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;++, &amp;ndash;（用作后缀）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;括号可以重写运算符优先级&lt;/p&gt;
&lt;h3 id=&#34;名称空间&#34;&gt;名称空间&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;名称空间是.NET中提供应用程序代码容器的方式，这样就可以唯一地标识代码及其内容。名称空间也用作&lt;code&gt;.NET Framework&lt;/code&gt;中给项分类的一种方式。大多数项都是类型定义，例如System.Int32&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;namesapce关键字为花括号中的代码块显式定义名称空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C#代码包含在全局名称空间中，对于包含在这段代码中的项，全局名称空间中的其他代码只要通过名称进行引用，就可以访问它们&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在名称空间代码的外部使用名称空间中的名称，就必须写出该名称空间中的限定名称&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限定名称包括它所有的分层信息，在不同名称空间级别之间使用句点字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;using语句本身不能访问另一个名称空间中的名称，除非名称空间中的代码已某种方式链接到项目上，或者代码是在该项目的源文件中定义的，或者是在链接到该项目的其他代码中定义的，否则就不能访问其中包含的名称。另外，如果包含名称空间的代码连接到项目上，那么无论是否使用using，都可以访问其中包含的名称。using语句便于我们访问这些名称，减少代码量以及提高可读性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Collections.Generic&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Linq&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Text&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Threading.Tasks&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以&lt;code&gt;using&lt;/code&gt;关键字开头的5段代码声明在这段C#代码中使用System, System.Collections.Generic, System.Linq, System.Text, System.Threading.Tasks名称空间，它们可以在该文件的所有名称空间中访问，不必进行限定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System名称空间是&lt;code&gt;.NET Framework&lt;/code&gt;应用程序的根名称空间，包含控制台应用程序需要的所有基本功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他四个名称空间常用于控制台应用程序，所有该程序包含了它们&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C#6新增了&lt;code&gt;using static&lt;/code&gt;关键字，允许把静态成员直接包含到C#程序的作用域中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;static&lt;/span&gt; Syatem.Console;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;不需要添加静态类名System.Console&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;要点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C#基本语法&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C#是一种区分大小写的语言，每行代码都已分号结束，如果代码太长或者想要标识嵌套的块，可以缩进代码行以便阅读。使用//或/**/语法可以包含不便宜的注释。代码块可以隐藏到区域中，也是为了方便阅读。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;变量&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;变量是有名称和类型的数据块，&lt;code&gt;.NET Framework&lt;/code&gt;定义了大量简单类型，例如数字和字符串（文本）类型，以供使用。变量只有经过声明和初始化后才能使用。可以把字面值付给变量，以初始化它们。变量还可以在单个步骤中声明和初始化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;表达式&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;表达式利用运算符和操作数来加你离，其中运算符对操作数执行操作，运算符有3种，一元、二元、三元运算符。它们分别操作1，2，3个操作数。数学运算符对数值执行操作，赋值运算符把表达式的结果放在变量种。运算符有固有的优先级，优先级确定了运算符在表达式中的处理顺序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;名称空间&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.NET应用程序中定义的所有名称，包括变量名都包含在名称空间中。名称空间采用层次结构，我们通常需要根据包含的名称空间来限定名称，以便访问它们。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;第四章-流程控制&#34;&gt;第四章 流程控制&lt;/h1&gt;
&lt;h2 id=&#34;布尔逻辑的用法&#34;&gt;布尔逻辑的用法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;布尔比较运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类别&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;示例表达式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;==&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 == var3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;!=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 != var3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 &amp;gt; var3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;gt;=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 &amp;gt;= var3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 &amp;lt; var3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 &amp;lt;= var3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;条件布尔运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类别&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;示例表达式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&amp;amp;（条件逻辑与）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 &amp;amp;&amp;amp; var3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;||（条件逻辑或）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 || var3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;amp;&amp;amp;的运算结果与&amp;amp;相同，但是性能更好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;||的运算结果与|相同，但是性能更好&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;布尔按位运算符和赋值运算符&#34;&gt;布尔按位运算符和赋值运算符&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类别&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;示例表达式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;=（逻辑与）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 &amp;amp;= var2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;|=（逻辑或）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 |= var2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;^=（逻辑异或）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 ^= var2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;运算符优先级的更新&#34;&gt;运算符优先级的更新&lt;/h4&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;h2 id=&#34;如何控制代码的分支&#34;&gt;如何控制代码的分支&lt;/h2&gt;
&lt;h3 id=&#34;三元运算符&#34;&gt;三元运算符&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;test&amp;gt; ? &amp;lt;resultIsTrue&amp;gt; : &amp;lt;resultIsFalse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果&lt;code&gt;test&lt;/code&gt;语句真值为&lt;code&gt;True&lt;/code&gt;则为&lt;code&gt;&amp;lt;resultIsTrue&amp;gt;&lt;/code&gt;语句，否则为&lt;code&gt;&amp;lt;resultIsFalse&amp;gt;&lt;/code&gt;语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; isLessThan10 = myInteger &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; myStr = isLessThan10 ? &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The integer is less than 10&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The integer is greater than 10 or equal to 10&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;if语句&#34;&gt;if语句&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&amp;lt;test&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;code executed &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;test&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;code executed &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;gt;test&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; resultString;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (myInteger &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resultString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The integer is less than 10&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resultString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The integer is greater than 10 or equal to 10&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用if判断更多条件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (var1 == &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// Do somthing.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// Do somthing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// Do somthing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (var1 == &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// Do somthing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (var1 &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// Do somthing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// Do somthing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;switch语句&#34;&gt;switch语句&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (&amp;lt;testVal&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &amp;lt;comparisonVal1&amp;gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVal&amp;gt; == &amp;lt;comparisonVal1&amp;gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &amp;lt;comparisonVal2&amp;gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;；&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVal&amp;gt; == &amp;lt;comparisonVal2&amp;gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVal&amp;gt; != &amp;lt;comparisionVals&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;testVal&lt;/code&gt;中的值与&lt;code&gt;comarisonVals&lt;/code&gt;分别进行比较，如果有一个匹配，就执行为该匹配提供的语句；如果没有匹配但是有&lt;code&gt;default&lt;/code&gt;语句，就执行这部分的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行完每部分的代码后都要有一个&lt;code&gt;break&lt;/code&gt;语句，将中断switch语句执行该结构后面的语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何编写循环代码&#34;&gt;如何编写循环代码&lt;/h2&gt;
&lt;h3 id=&#34;do循环&#34;&gt;do循环&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;code to be looped&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(&amp;lt;Test&amp;gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;while循环&#34;&gt;while循环&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&amp;lt;Test&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;code to looped&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;for循环&#34;&gt;for循环&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&amp;lt;initialization&amp;gt;; &amp;lt;condition&amp;gt;; &amp;lt;operation&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;code to loop&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等价于&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;initialization&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(&amp;lt;condition&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;code to loop&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;operation&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;循环的中断&#34;&gt;循环的中断&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;break：&lt;/code&gt;立即终止循环&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;continue：&lt;/code&gt;立即终止当前的循环（执行下一次循环）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;return：&lt;/code&gt;跳出循环及包含该循环的函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;无限循环&#34;&gt;无限循环&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//code to loop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(i &amp;lt;= &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((i % &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;) == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;{i++}&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;存疑：第四章习题2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;本章要点-1&#34;&gt;本章要点&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;要点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;布尔逻辑&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;布尔逻辑使用布尔值(true 和false)计算条件。布尔运算符用于比较数值，返回布尔结果。一些布尔运算符也用于对数值的底层位结构执行按位操作，还有一些专门的按位运算符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分支&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可使用布尔逻辑控制程序流。计算结果为布尔值的表达式可用确定是否执行某个代码块，可以使用if语句或三元运算符(?:)进行简单的分支，或者使用switch语句同时检查多个条件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;循环&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;循环允许根据指定的条件多次执行代码块。使用do循环和while循环可在布尔表达式为true时执行代码，使用for循环可在循环代码中包含一个计数器。循环可以使用continue中断当前的迭代，或使用break完全中断。一些循环只能在用户强制中断时结束，这些循环称为无限循环。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第五章-变量的更多内容&#34;&gt;第五章 变量的更多内容&lt;/h1&gt;
&lt;h2 id=&#34;如何在类型之间进行隐式和显式转换&#34;&gt;如何在类型之间进行隐式和显式转换&lt;/h2&gt;
&lt;h3 id=&#34;隐式转换&#34;&gt;隐式转换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无论什么变量类型，所有的数据都是一系列的位，变量的含义是通过解释这些数据的方式来确定的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;方式&lt;/strong&gt;：直接进行赋值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;ushort&lt;/span&gt; destinationVar;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; sourceVar = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;destinationVar = sourceVar;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;sourceVar:{sourceVar}&amp;#34;&lt;/span&gt;);          &lt;span style=&#34;color:#228b22&#34;&gt;//输出a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;destinationVar:{destinationVar}&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;//输出97&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;条件&lt;/strong&gt;：转化为的类型所存储的数字的范围要比被转化的类型所存储的数字的范围要大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;char类型用一个数字表示Unicode字符集中的一个字符，char和ushort都存储0~65535之间的数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;显式转换&#34;&gt;显式转换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;适用范围&lt;/strong&gt;：转化为的类型所存储的数字的范围要比被转化的类型所存储的数字的范围要小，但是被转化的数字在将要转化为的类型所存储的数字的范围之内，这时可以进行强制转换&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt; destinationVar;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;short&lt;/span&gt; sourceVar = &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;destinationVar = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;) sourceVar;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;desinationVar {destinationVar}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;sourceVar {sourceVar}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;**方式：**在被转化数字前面添加将要转化为的类型，之后进行赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;溢出检查&#34;&gt;溢出检查&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;转化为的类型所存储的数字的范围要比被转化的类型所存储的数字的范围要小，被转化的数字也在将要转化为的类型所存储的数字的范围之外，这时进行强制转换（显式转换）将会出现溢出的现象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于为表达式设置的所谓溢出检查上下文，需要用到两个关键字：&lt;code&gt;checked&lt;/code&gt;和&lt;code&gt;unchecked&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt; destinationVar;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;short&lt;/span&gt; sourceVar = &lt;span style=&#34;color:#b452cd&#34;&gt;281&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;destinationVar = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;checked&lt;/span&gt;((&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;) sourceVar);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;desinationVar {destinationVar}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;sourceVar {sourceVar}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;checked&lt;/code&gt;会检查在类型转换中是否出现数据溢出的现象，如果出现的话程序会崩溃&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unchecked&lt;/code&gt;不会检查在类型转换中是否出现数据溢出的现象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也可以在Visual Studio中进行设置，让IDE检查是否在类型转换中出现数据溢出的现象，这时就不用&lt;code&gt;checked&lt;/code&gt;关键字&lt;/p&gt;
&lt;p&gt;具体设置方法如下：&lt;/p&gt;
&lt;p&gt;$$
项目\rightarrow 属性\rightarrow 生成\rightarrow高级\rightarrow检查运算上溢/下溢
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这一设置可能会对程序执行速度带来一定的影响，因此当不再需要时就禁用这个设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;使用convert命令进行显式转换&#34;&gt;使用&lt;code&gt;Convert&lt;/code&gt;命令进行显式转换&lt;/h3&gt;
&lt;p&gt;前面的很多代码中都使用&lt;code&gt;ToDouble&lt;/code&gt;将输入的字符串转化为&lt;code&gt;Double&lt;/code&gt;类型的浮点数，但是字符串必须是一个数值的有效表达方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;可选符号（加号或减号）&lt;/code&gt;+&lt;code&gt;0位或多位数字&lt;/code&gt;+&lt;code&gt;可选句点&lt;/code&gt;+&lt;code&gt;0位或多位数字&lt;/code&gt;+&lt;code&gt;可选的e或E&lt;/code&gt;+&lt;code&gt;可选符号（加号或减号）&lt;/code&gt;+&lt;code&gt;一位或多位数字&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除了可能还有空格（在序列前或后），不能有其他字符&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使用&lt;code&gt;Convert&lt;/code&gt;进行转换，总是要进行溢出检查，&lt;code&gt;checked&lt;/code&gt;和&lt;code&gt;unchecked&lt;/code&gt;关键字以及上面配置的属性设置不起作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;如何创建和使用枚举类型&#34;&gt;如何创建和使用枚举类型&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; &amp;lt;typeName&amp;gt; : &amp;lt;underlyingType&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;value1&amp;gt; = &amp;lt;actualVal1&amp;gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;value2&amp;gt; = &amp;lt;actualVal2&amp;gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;valueN&amp;gt; = &amp;lt;actualValN&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;未赋值的任何值会自动获得一个初始值，这个初始值是比上一明确声明的值大1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以使用一个值作为另一个的基础值：&lt;code&gt;&amp;lt;value2&amp;gt; = &amp;lt;value1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类型的定义代码放在名称空间中，与Main函数并列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;valueN&amp;gt;&lt;/code&gt;的类型为&lt;code&gt;&amp;lt;underlyingType&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;枚举类型直接输出为对应的名称&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    ```c#
    origination myDirection;
    myDirection = origination.north;
    WriteLine($&amp;quot;myDirection = {myDirection}&amp;quot;); // 输出为myDirection = north
    ```
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类型转换&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum origination : byte
{
    north = 1,
    south = 2,
    west = 3,
    east = 4
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;枚举类型转化为基本类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;        ```c#
        origination myDirection;
        myDirection = origination.north;
        byte myDirectionByte = (byte) myDirection; //  myDirectionByte = 1
        ```

*   枚举类型转化为字符串类型

    *

        ```c#
        origination myDirection;
        myDirection = origination.north;
        string myString = Convert.ToString(myDirection); //myDirectionString = &amp;quot;north&amp;quot;
        ```

*   基本类型转化为枚举类型

    *

            byte myByte = 1;
            myDirection = (origination) myByte;

*   字符串类型转化为枚举类型

    *

        ```c#
        string myString = &amp;quot;north&amp;quot;;
        origination myDirection = (origination) Enum.Parse(typeof(origination), myString);
        ```
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;如何创建和使用结构类型&#34;&gt;如何创建和使用结构类型&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; &amp;lt;typeName&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;accessibility1&amp;gt; &amp;lt;type1&amp;gt; &amp;lt;name1&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;accessibility2&amp;gt; &amp;lt;type2&amp;gt; &amp;lt;name2&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结构类型也放在名称空间内，与Main函数并列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过使用&lt;code&gt;.&lt;/code&gt;来对结构内的属性进行i引用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何创建和使用数组&#34;&gt;如何创建和使用数组&lt;/h2&gt;
&lt;h3 id=&#34;数组的声明&#34;&gt;数组的声明&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;方式&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;baseType&amp;gt; [] &amp;lt;name&amp;gt; = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &amp;lt;baseType&amp;gt; [ArraySize] {..,..,...}; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] myArray = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;]; &lt;span style=&#34;color:#228b22&#34;&gt;//数组大小(可以略过这一步，直接赋给数组内容)，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myArray = {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;}; &lt;span style=&#34;color:#228b22&#34;&gt;//数组内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;需要注意的是：第一行数组大小传入的参数是字面值或者常量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] myArray = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [i];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;foreach循环&#34;&gt;foreach循环&lt;/h3&gt;
&lt;p&gt;foreach循环可以使用一种简便的语法可以定位数组中的每个元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只能对数组内容进行访问，不能改变任何元素的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;方式&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&amp;lt;baseType&amp;gt; &amp;lt;name&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; &amp;lt;array&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//can use &amp;lt;name&amp;gt; for each element&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; friendName &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; friendsName)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(friendName);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用switch-case表达式进行模式匹配&#34;&gt;使用switch case表达式进行模式匹配&lt;/h3&gt;
&lt;p&gt;C#7中可以基于变量的类型在switch case中进行模式匹配&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(&amp;lt;testVar&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVar&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; an &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        bresk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; s when s.Length == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVar&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; an &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; and the length of it &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVar&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVar&amp;gt; != comparisonVals&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        bresk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;case关键字后面紧跟的是想要检查的变量类型，之后是一个声明的变量。&lt;code&gt;&amp;lt;testVar&amp;gt;&lt;/code&gt;的值将保存到声明的变量中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C#7中的when关键字修饰符应用到了switchh case表达式中，when关键字修饰符允许扩展或添加一些额外的条件，以执行case语句中的代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多维数组矩形数组&#34;&gt;多维数组（矩形数组）&lt;/h3&gt;
&lt;h4 id=&#34;声明与初始化&#34;&gt;声明与初始化&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;baseType&amp;gt; [,] &amp;lt;name&amp;gt; = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &amp;lt;baseType&amp;gt; [i,j]; &lt;span style=&#34;color:#228b22&#34;&gt;//n个逗号声明n+1维数组&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//上面示例中声明了二维数组，第一层有i个数组，每个数组有j个元素&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; [,] doubleArray = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doubleArray = {{&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;},{&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;}};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;引用&#34;&gt;引用&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;name&amp;gt;[a,b];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doubleArray[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];&lt;span style=&#34;color:#228b22&#34;&gt;//2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;遍历&#34;&gt;遍历&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; number &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; doubleArray)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;{nnumber}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//遍历顺序为doubleArray[0,0],doubleArray[0,1]...doubleArray[1,2]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;数组的数组锯齿数组&#34;&gt;数组的数组（锯齿数组）&lt;/h3&gt;
&lt;h4 id=&#34;声明&#34;&gt;声明&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;baseType&amp;gt; []...[] jaggedArray;&lt;span style=&#34;color:#228b22&#34;&gt;//有多少括号就是几维的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [][] jaggedArray;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;初始化&#34;&gt;初始化&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;初始化需要层层初始化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [][] jaggedArray;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jaggedArray = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;][];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jaggedArray[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jaggedArray[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以使用下面的方式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [][] jaggedArray;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jaggedArray = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;][] {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;遍历-1&#34;&gt;遍历&lt;/h4&gt;
&lt;p&gt;遍历也需要层层遍历&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [][] divisors1To10 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;][];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;divisors1To10 = {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;( &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] divisorOfInt &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; divisors1To10)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; divisor &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; divisorOfInt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;{divisor}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如何处理字符串&#34;&gt;如何处理字符串&lt;/h2&gt;
&lt;h3 id=&#34;string类型可以看作char变量的只读数组&#34;&gt;string类型可以看作char变量的只读数组&lt;/h3&gt;
&lt;p&gt;使用下面的语法访问每个字符，不能对字符串进行改写！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;A String&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; myChar = myString[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];&lt;span style=&#34;color:#228b22&#34;&gt;//mychar为&amp;#39; &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获得char数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;A String&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; [] myChars = myString.ToCharArray();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;遍历字符串&#34;&gt;遍历字符串&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; myChar &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; myString)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;{myChar}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;字符串长度&#34;&gt;字符串长度&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; stringLength = myString.Length;&lt;span style=&#34;color:#228b22&#34;&gt;//字符串长度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;字符串大小写&#34;&gt;字符串大小写&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myUpperString = myString.ToUpper();&lt;span style=&#34;color:#228b22&#34;&gt;//字符串全部字符大写&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myLowerString = myString.ToLower();&lt;span style=&#34;color:#228b22&#34;&gt;//字符串全部字符小写&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ToUpper()&lt;/code&gt;和&lt;code&gt;ToLower()&lt;/code&gt;并不会改变&lt;code&gt;myString&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;删除字符串前后的空格&#34;&gt;删除字符串前后的空格&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; userResponse = ReadLine();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userResponse = userResponse.Trim();&lt;span style=&#34;color:#228b22&#34;&gt;//删除字符串前后的空格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userResponse = userResponse&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;。&lt;/span&gt;TrimStart();&lt;span style=&#34;color:#228b22&#34;&gt;//删除字符串前的空格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userResponse = userResponse.TrimEnd();&lt;span style=&#34;color:#228b22&#34;&gt;//删除字符串后的空格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;删除字符串中指定的字符&#34;&gt;删除字符串中指定的字符&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; [] trimChars = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; userResponse = ReadLine();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userResponse = userResponse.Trim(trimChars);&lt;span style=&#34;color:#228b22&#34;&gt;//删除字符串中指定的字符&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userResponse = userResponse.TrimStart(trimChars);&lt;span style=&#34;color:#228b22&#34;&gt;//删除字符串前出现的连续的指定字符，直到下一个字符不在trimChars内&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userResponse = userResponse.TrimEnd(trimChars);&lt;span style=&#34;color:#228b22&#34;&gt;//删除字符串后出现的连续的指定字符，直到下一个字符不在trimChars内&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;向字符串中添加指定字符&#34;&gt;向字符串中添加指定字符&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myString = myString.PadLeft(&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;//在字符串左边添加字符-直至字符串长度为10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myString = myString.PadRight(&lt;span style=&#34;color:#b452cd&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;//在字符串右边添加空格直至字符串长度为13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结-1&#34;&gt;总结&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;要点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;类型转换&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;值可以从一种类型转换为另一种类型，但是在转换时应该遵循一些规则。隐式转换是自动进行的，但只有当源值类型的所有可能值都在目标值类型中使用时，才能进行隐式转换。也可以进行显式转换，但是可能得不到期望的值，甚至会出错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;枚举&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;枚举是包含一组离散值的类型，每个离散值都有一个名称。枚举用关键词&lt;code&gt;enum&lt;/code&gt;定义，以便在代码中理解它们，因为它们枚举的可读性都很强。枚举有基本的数值类型（默认为&lt;code&gt;int&lt;/code&gt;），可使用枚举值的这个属性在枚举值和数值之间转换，或者标识枚举值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;结构&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;结构是同时包含几个不同值的类型。结构使用&lt;code&gt;struct&lt;/code&gt;关键字定义。包含在结构中的每个值都有类型和名称，存储在结构中的每个值的类型不一定相同。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数组&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数组是同类型数值的集合。数组有固定的大小或长度，确定了数组可以包含多少个值。可以定义多维数组或锯齿数组来保存不同数量和形状的数据。还可以使用&lt;code&gt;foreach&lt;/code&gt;循环来迭代数组中的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第六章-函数&#34;&gt;第六章 函数&lt;/h1&gt;
&lt;h2 id=&#34;如何定义和使用既不接受任何数据也不返回任何数据的简单函数&#34;&gt;如何定义和使用既不接受任何数据也不返回任何数据的简单函数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; &amp;lt;functionName&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//code to execute without any return &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;关键字static和void&#34;&gt;关键字&lt;code&gt;static&lt;/code&gt;和&lt;code&gt;void&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt;与面向对象的概念相关，后面会进行讨论&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt;表示函数没有返回值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数名&#34;&gt;函数名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数名采用&lt;code&gt;PascalCase&lt;/code&gt;形式进行编写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数名后跟()，并且在调用函数时不仅要添加函数名也要添加()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;要执行的代码块&#34;&gt;要执行的代码块&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;要执行的代码块放在大括号内，&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对main函数的解释&#34;&gt;对Main函数的解释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义的函数的位置与Main函数的位置并列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Main函数是控制台应用程序的入口点函数，当执行C#应用程序时，就会调用它包含的入口点函数，这个函数执行完毕后，应用程序就终止了。所有C#代码必须有一个入口点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何在函数中传入和传出数据&#34;&gt;如何在函数中传入和传出数据&lt;/h2&gt;
&lt;h3 id=&#34;返回值&#34;&gt;返回值&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &amp;lt;returnType&amp;gt; &amp;lt;FunctionName&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//code to execute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;lt;returnValue&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;返回值&lt;code&gt;&amp;lt;returnValue&amp;gt;&lt;/code&gt;的类型必须为&lt;code&gt;&amp;lt;returnType&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数在任何情况下结束都必须有&lt;code&gt;return&lt;/code&gt;，不能存在任何一种情况函数执行完成后没有&lt;code&gt;return&lt;/code&gt;语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;只执行一行代码（return）的函数可以这样编写&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &amp;lt;returnTyoe&amp;gt; &amp;lt;FunctionName&amp;gt; () =&amp;gt; &amp;lt;returnValue&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;参数&#34;&gt;参数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &amp;lt;returnType&amp;gt; &amp;lt;FunctionName&amp;gt; (&amp;lt;paramType&amp;gt; &amp;lt;paramName&amp;gt;, ...)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//code to execute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;lt;returnValue&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数在定义时指定接受的参数列表以及这些参数的类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数在调用的时候提供匹配的实参列表&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参数匹配&#34;&gt;参数匹配&lt;/h4&gt;
&lt;p&gt;调用函数的时候必须使提供的参数与函数定义中指定的参数完全匹配：匹配参数的类型、个数和顺序&lt;/p&gt;
&lt;h4 id=&#34;参数数组&#34;&gt;参数数组&lt;/h4&gt;
&lt;p&gt;C#允许为函数指定一个特殊参数，这个参数必须是函数定义的最后一个参数，称为参数数组。参数数组允许使用个数不定的参数来调用函数，可以使用&lt;code&gt;params&lt;/code&gt;关键字定义它们。&lt;/p&gt;
&lt;p&gt;参数数组可以简化代码，因为在调用代码时不必传递数组，而是传递同类型的几个参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &amp;lt;returnType&amp;gt; &amp;lt;FunctionName&amp;gt; (&amp;lt;p1type&amp;gt; &amp;lt;p1Name&amp;gt;...,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;params&lt;/span&gt; &amp;lt;type&amp;gt; [] &amp;lt;name&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;lt;returnValue&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;FunctionName&amp;gt; (&amp;lt;p1&amp;gt;,...,&amp;lt;val1&amp;gt;,&amp;lt;val2&amp;gt;...)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;p1&lt;/code&gt;&amp;hellip;的类型为&lt;code&gt;p1type&lt;/code&gt;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;val1&lt;/code&gt;,&lt;code&gt;val2&lt;/code&gt;&amp;hellip;的类型为&lt;code&gt;type&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;引用参数和值参数&#34;&gt;引用参数和值参数&lt;/h3&gt;
&lt;h4 id=&#34;值参数&#34;&gt;值参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;**值参数：**在使用参数时，是把一个值传递给函数所使用的一个变量。在函数中对此变量的任何修改都不影响函数调用中指定的参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val doubled = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;调用&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; doubleNum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doubleNum = ShowDouble(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;num = {num}, doubleNum = {doubleNum}&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;// num为2,doubleNum为4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;引用参数&#34;&gt;引用参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;**引用参数：**函数处理的变量与函数调用中使用的变量相同，而不仅仅是值相同的变量。对该变量的任何修改都会影响用作参数的变量值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val doubled = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;调用&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; doubleNum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doubleNum = ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; num);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;num = {num}, doubleNum = {doubleNum}&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;// num为4,doubleNum为4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;num&lt;/code&gt;不能是常量：&lt;code&gt;const int num&lt;/code&gt;是错误的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;num&lt;/code&gt;必须经过初始化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ref用于返回值&#34;&gt;ref用于返回值&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;函数定义&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; val;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数返回值为&lt;code&gt;ref int&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数参数类型为&lt;code&gt;ref int&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数返回值前面必须带上&lt;code&gt;ref&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ref用作局部变量&#34;&gt;ref用作局部变量&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; myNum = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; myRefNum = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; myNum;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义引用时要&lt;code&gt;ref int&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;赋值时要在变量前添加&lt;code&gt;ref&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ref返回array&#34;&gt;ref返回array&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; ReturnByRef()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] array = {&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; array[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt;是引用类型，在没有参数声明的情况下使用&lt;code&gt;ref&lt;/code&gt;关键字可以返回&lt;code&gt;arrays&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然strings是引用类型，但是属于特例，因为它们是不可改变的，修改它们会产生新的string，原有的string则会被解除分配。如果试图通过ref返回string，C#编译器Roslyn会报错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;输出参数&#34;&gt;输出参数&lt;/h3&gt;
&lt;p&gt;除了按引用传递值外，还可以使用&lt;code&gt;out&lt;/code&gt;关键字，指定所给参数是一个&lt;strong&gt;输出参数&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;out关键字的使用方法&#34;&gt;&lt;code&gt;out&lt;/code&gt;关键字的使用方法：&lt;/h4&gt;
&lt;p&gt;在函数定义和函数调用中用作参数的修饰符（同&lt;code&gt;ref&lt;/code&gt;类似），也有不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把未赋值的用作&lt;code&gt;ref&lt;/code&gt;参数是非法的，但是可以把未赋值的变量用作&lt;code&gt;out&lt;/code&gt;参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用代码时可以使用已经赋值的变用作&lt;code&gt;out&lt;/code&gt;参数，但是存储在该变量中的值在函数执行的时候会丢失&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Collections.Generic&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Linq&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Text&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Threading.Tasks&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;static&lt;/span&gt; System.Console;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;Ch06Ex05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MaxValue(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] array, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxIndex)&lt;span style=&#34;color:#228b22&#34;&gt;//函数声明的时候带上out&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxValue = array[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            maxIndex = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;					&lt;span style=&#34;color:#228b22&#34;&gt;//初始化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; array.Length; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (array[i] &amp;gt; maxValue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    maxValue = array[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    maxIndex = i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; maxValue;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] array = { &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;The maxValue is {MaxValue(array, out int maxIndex)}.&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;//函数调用的时候也要带上out&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;The index of the maxValue(first occurrence) is {maxIndex}.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ReadLine();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用变量作用域&#34;&gt;使用变量作用域&lt;/h2&gt;
&lt;h3 id=&#34;局部变量&#34;&gt;局部变量&lt;/h3&gt;
&lt;h3 id=&#34;全局变量&#34;&gt;全局变量&lt;/h3&gt;
&lt;h4 id=&#34;声明-1&#34;&gt;声明&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; myString;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;与Main函数并列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;声明前必须有&lt;code&gt;static&lt;/code&gt;或者&lt;code&gt;const&lt;/code&gt;，后者代表变量不可修改&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;调用&#34;&gt;调用&lt;/h4&gt;
&lt;p&gt;全局变量声明后，在任何位置都可以进行调用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果全局变量和局部变量重名&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Program.myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;myString in prgram&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;不存在局部变量和全局变量重名&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;myString in program&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;其他结构中变量的作用域&#34;&gt;其他结构中变量的作用域&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Line {Convert.String(i)}&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;$&lt;/span&gt;{myString});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;{myString}&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;//Line 9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义在&lt;code&gt;for&lt;/code&gt;循环之外的&lt;code&gt;myString&lt;/code&gt;才能够相当于一个“全局变量”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;myString&lt;/code&gt;声明后必须进行&lt;strong&gt;赋值&lt;/strong&gt;，因为赋值代表着申请一块内存空间。如果赋值在循环内发生，那么该值实际上被定义为一个局部值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;参数和返回值与全局数据&#34;&gt;参数和返回值与全局数据&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val doubled = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val = {val}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; val);       &lt;span style=&#34;color:#228b22&#34;&gt;//6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val = {val}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val douled = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val = {val}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ShowDouble();              &lt;span style=&#34;color:#228b22&#34;&gt;//6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val = {val}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val douled = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val = {val}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;out&lt;/span&gt; val);       &lt;span style=&#34;color:#228b22&#34;&gt;//6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val = {val}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上三段代码运行结果相同，但是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第二段代码使用全局变量，会对函数的灵活性有行为的限制。要存储结果，就必须总是把这个全局变量值复制到其他变量值中。全局变量还可能在应用程序中的其他地方被代码修改，这会导致预料不到的后果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第一段代码使用&lt;code&gt;ref&lt;/code&gt;，变量&lt;code&gt;val&lt;/code&gt;成为引用变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三段代码使用&lt;code&gt;out&lt;/code&gt;，&lt;code&gt;ShowDouble&lt;/code&gt;函数运行结束前最后的&lt;code&gt;val&lt;/code&gt;作为输出参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;局部函数&#34;&gt;局部函数&lt;/h3&gt;
&lt;p&gt;函数定义在Main函数之内，不能从Program类中的其他函数中调用这个函数。函数在声明时不必添加&lt;code&gt;static&lt;/code&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; myNumber = &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;Main Function = {myNumber}.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            DoubleInt(myNumber);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; DoubleInt(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;Local Function = {val}.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如何结合使用main函数和命令行参数&#34;&gt;如何结合使用&lt;code&gt;Main()&lt;/code&gt;函数和命令行参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Main()&lt;/code&gt;函数是C#程序的入口，执行这个函数就是执行应用程序。在执行过程开始时，会执行Main()函数，在Main()函数执行完毕后，执行过程就结束了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Main()函数的返回值为&lt;code&gt;void&lt;/code&gt;或者&lt;code&gt;int&lt;/code&gt;，返回值为int时用于表示应用程序的终止方式。一般来说返回值为0表示应用程序已经执行完毕并安全地终止。通常用作错误提示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Main()函数有一个可选参数&lt;code&gt;string[] args&lt;/code&gt;，提供了一种从应用程序的外部接受信息的方法，这些信息在运行应用程序时以命令行参数的形式指定&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; Main();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如何把函数提供为结构类型成员&#34;&gt;如何把函数提供为结构类型成员&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CustomerName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; firstName, lastName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; Name() =&amp;gt; firstName + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + lastName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            CustomerName myCustomerName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            myCustomerName.firstName = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            myCustomerName.lastName = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Franklin&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;myCustomer&amp;#39;s name is {myCustomerName.Name()}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了数据，结构&lt;code&gt;struct&lt;/code&gt;还可以包含函数，函数可以访问结构内的数据成员，函数在结构中可以看作全局成员&lt;/p&gt;
&lt;h2 id=&#34;如何使用函数重载&#34;&gt;如何使用函数重载&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;函数的签名：包括&lt;/strong&gt;函数名和&lt;strong&gt;参数&lt;/strong&gt;，在函数定义过程中要保证所有函数的签名不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MaxValue(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] intArray)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxValue = intArray[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; intArray)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt; &amp;gt; maxValue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            maxValue = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; maxValue;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; MaxValue(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; [] doubleArray)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; maxValue = doubleArray[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; doubleArray)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt; &amp;gt; maxValue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            maxValue = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; maxValue;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;doubled val = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;doubled val = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] intArray = { &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt;[] doubleArray = { &lt;span style=&#34;color:#b452cd&#34;&gt;1.1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2.2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3.3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;4.4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5.5&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; intMaxValue = MaxValue(intArray);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; doubleMaxValue = MaxValue(doubleArray);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;intMaxValue = {intMaxValue}, doubleMaxValue = {doubleMaxValue}.&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;//5,5.5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val1 = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, val2 = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; val1);           &lt;span style=&#34;color:#228b22&#34;&gt;//4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val1 = {val1}.&amp;#34;&lt;/span&gt;);   &lt;span style=&#34;color:#228b22&#34;&gt;//4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ShowDouble(val2);               &lt;span style=&#34;color:#228b22&#34;&gt;//4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val2 = {val2}.&amp;#34;&lt;/span&gt;);   &lt;span style=&#34;color:#228b22&#34;&gt;//2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上面的代码中定义了两个&lt;code&gt;MaxValue&lt;/code&gt;函数和两个&lt;code&gt;ShowDouble&lt;/code&gt;函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用哪个&lt;code&gt;MaxValue&lt;/code&gt;函数取决于传入的参数是&lt;code&gt;int&lt;/code&gt;类型的数组还是&lt;code&gt;double&lt;/code&gt;类型的数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用哪个&lt;code&gt;ShowDouble&lt;/code&gt;函数取决于传入的参数是否带有&lt;code&gt;ref&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何使用委托&#34;&gt;如何使用委托&lt;/h2&gt;
&lt;p&gt;委托是一种存储函数引用的类型，使用&lt;code&gt;delegate&lt;/code&gt;关键字，委托的声明指定了一个返回类型和一个参数列表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; ProcessDelegate (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; param1, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; param2)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;定义了委托之后就可以声明该委托的变量（与委托具有相同返回类型和参数的函数引用）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; Multiply (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; param1, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; param2) =&amp;gt; param1 * param2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; Divide (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; param1, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; param2) =&amp;gt; param1 / param2;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用委托来访问函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; [] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ProcessDelegate process1, process2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    process1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ProcessDelegate(Multiply); &lt;span style=&#34;color:#228b22&#34;&gt;// 或者process1 = Multiply&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    process2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ProcessDelegate(Divide);   &lt;span style=&#34;color:#228b22&#34;&gt;// 或者process2 = Divide&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时&lt;code&gt;process1&lt;/code&gt;和&lt;code&gt;process2&lt;/code&gt;就相当于函数&lt;code&gt;Multiply&lt;/code&gt;和&lt;code&gt;Divide&lt;/code&gt;，可以向其传入参数得到返回值&lt;/p&gt;
&lt;h2 id=&#34;总结-2&#34;&gt;总结&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;要点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;定义函数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用函数名、0个或多个参数及返回类型来定义函数。函数的名称和参数统称为函数的签名。可以定义名称相同但签名不同的多个函数——这称为函数重载。也可以在结构类型中定义函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;返回值和参数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;函数的返回类型可以是任意类型，如果函数没有返回值，其返回类型就是&lt;code&gt;void&lt;/code&gt;。参数也可以是任意类型，由一个用逗号分隔的类型和名称对组成。个数不定的特定类型的参数可以通过参数数组来指定。参数可以指定为&lt;code&gt;ref&lt;/code&gt;或&lt;code&gt;out&lt;/code&gt;，以便给调用者返回值。调用函数时，所指定的参数的类型和顺序必须匹配函数的定义，并且如果参数定义中使用了&lt;code&gt;ref&lt;/code&gt;和&lt;code&gt;out&lt;/code&gt;关键字，那么在调用函数的时候也必须包括对应的&lt;code&gt;ref&lt;/code&gt;和&lt;code&gt;out&lt;/code&gt;关键字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;变量作用域&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;变量根据定义它们的代码块来界定其使用范围。代码块包括方法和其他结构，例如循环体。可在不同的作用域中定义多个不同的同名变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;命令行参数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;在执行应用程序的时候，控制台应用程序中的Main函数可接收传送给应用程序的命令行参数。这些参数用空格隔开，较长的参数可以放在引号中传送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;委托&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;除了直接调用函数外，还可以通过委托调用它们。委托是用返回类型和参数列表定义的变量，给定的委托类型可以匹配返回类型和参数与委托定义相同的方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;面向对象的c语言&#34;&gt;面向对象的C#语言&lt;/h1&gt;
&lt;h2 id=&#34;类-字段-方法&#34;&gt;类 字段 方法&lt;/h2&gt;
&lt;h3 id=&#34;类字段方法&#34;&gt;类、字段、方法&lt;/h3&gt;
&lt;p&gt;面向对象的C#语言总是把现实中的事物抽象为类，类的最基本要素是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字段(field)&lt;/strong&gt;：变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;方法(method)&lt;/strong&gt;：函数（对象的行为）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Person&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; strign name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; SayHello()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello! My name is &amp;#34;&lt;/span&gt; + name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; GetInfo()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Name:&amp;#34;&lt;/span&gt; + name + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;,Age:&amp;#34;&lt;/span&gt; + age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;构造方法constructor&#34;&gt;构造方法constructor&lt;/h3&gt;
&lt;h4 id=&#34;构造方法&#34;&gt;构造方法&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;**构造方法：**构造方法的主要作用是完成对象的初始化工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;构造方法的方法名与类名相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造方法没有返回类型，也不能写void&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Person (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; n, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name = n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    age = a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;默认构造方法&#34;&gt;默认构造方法&lt;/h4&gt;
&lt;p&gt;如果用户没有定义任何构造方法，系统则会自动产生一个&lt;strong&gt;默认构造方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Person() {}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;对象的创建&#34;&gt;对象的创建&lt;/h4&gt;
&lt;p&gt;构造方法不能显式地直接调用，而是用new来调用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Person p = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Liming&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;对象的使用&#34;&gt;对象的使用&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(p.name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p.SayHello();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;析构方法&#34;&gt;析构方法&lt;/h3&gt;
&lt;p&gt;由于C#自动进行对象的释放，所以要用户一般不定义析构方法&lt;/p&gt;
&lt;h3 id=&#34;使用this&#34;&gt;使用this&lt;/h3&gt;
&lt;p&gt;this指的是这个对象本身，常用于&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;访问这个对象的字段以及方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;区分字段与局部变量&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Person(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.name = name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.age = age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;用于构造方法调用另一个构造方法？？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Person() :&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//构造方法的其他语句&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;属性-索引&#34;&gt;属性 索引&lt;/h2&gt;
- https://geoyxd.github.io/posts/c_sharp_learn/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>C#教程</title>
        <link>https://geoyxd.github.io/posts/c#_%E6%95%99%E7%A8%8B/</link>
        <pubDate>Fri, 28 Jun 2024 22:30:53 +0800</pubDate>
        
        <guid>https://geoyxd.github.io/posts/c#_%E6%95%99%E7%A8%8B/</guid>
        <description>GNSS Site https://geoyxd.github.io/posts/c#_%E6%95%99%E7%A8%8B/ -&lt;h1 id=&#34;第一章--c简介&#34;&gt;第一章  C#简介&lt;/h1&gt;
&lt;h2 id=&#34;net-framework的含义&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt;的含义&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;.NET Framework&lt;/code&gt;是Microsoft为开发应用程序而创建的一个具有革命意义的平台&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以运行在多个操作系统上：&lt;code&gt;Windows&lt;/code&gt;,&lt;code&gt;Windows Mobile&lt;/code&gt;, &lt;code&gt;Linux&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;未限制应用程序的类型：&lt;code&gt;桌面应用程序&lt;/code&gt;、&lt;code&gt;Windows桌面应用程序（UWP）&lt;/code&gt;、&lt;code&gt;云/Web应用程序&lt;/code&gt;、&lt;code&gt;Web API&lt;/code&gt;、&lt;code&gt;其他各种类型的应用程序&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于Web、云和Web API应用程序，按照定义是多平台的应用程序，因为任何带有Web浏览器的系统都可以访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以用于各种语言：&lt;code&gt;C#&lt;/code&gt;, &lt;code&gt;C++&lt;/code&gt;, &lt;code&gt;F#&lt;/code&gt;, &lt;code&gt;JavaScript&lt;/code&gt;, &lt;code&gt;Visual Basic&lt;/code&gt;, &lt;code&gt;COBOL&lt;/code&gt;及其他旧语言&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;net-framework的内容&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt;的内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;``.NET Framwork&lt;code&gt;主要包含一个庞大的&lt;/code&gt;代码库`，可以在客户端或服务器语言中通过面向对象编程技术（Object-Oriented Programming, OOP）来使用这些代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块&lt;/strong&gt;：代码库分为多个不同的模块，这样就可以根据希望得到的结果来选择使用其中的各个部分，一些模块还分为更具体的子模块。主要是为了满足不同的操作系统可以根据各自的特征支持其中的部分或全部模块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通用类型系统(Common Type System, CTS)&lt;/strong&gt;：部分&lt;code&gt;.NET Framwork&lt;/code&gt;库定义了一些基本类型，类型是数据的一种表达方式，指定最基本类型有助于&lt;code&gt;.NET Framwork&lt;/code&gt;的各种语言之间进行交互操作，这称为通用类型系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;.NET 公共语言运行库(Common Language Runtime, CLR)&lt;/strong&gt;：除了基本类型库之外，``.NET Framwork`还包含.NET公共语言运行库，负责管理用.NET库开发的所有应用程序的执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;net-standard和net-core&#34;&gt;&lt;code&gt;.NET Standard&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;开源分支&lt;/strong&gt;：Github上，项目可以被分支并在多个平台上定制运行。&lt;code&gt;.NET Compact Framework&lt;/code&gt;和&lt;code&gt;.NET Micro Framework&lt;/code&gt;是&lt;code&gt;.NET Framework&lt;/code&gt;的分支，每个&lt;code&gt;.NET Framework&lt;/code&gt;的分支都有一个具体的需求和目标，正是这些需求和目标催生了对应的分支。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.NET Core&lt;/code&gt;是进行跨平台代码开发的最优化解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基类库(Base Class Libraries, BCL)&lt;/strong&gt;：&lt;code&gt;.NET Framework&lt;/code&gt;中包含一组基类库(BCL)，这些库中包含的API用于大多数开发人员需要完成的基本功能。在不同版本的&lt;code&gt;.NET Framework&lt;/code&gt;中这些功能的实现是不同的。因此需要开发人员根据应用程序运行的平台，针对对应用程序的不同分支或版本去学习、开发和管理多个基类库(BCL)。分支概念导致了更多&lt;code&gt;.NET Framework&lt;/code&gt;版本的出现，因此需要一组基本编程API来处理各种分支和版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.NET Standard&lt;/code&gt;可以解决上述问题，它是一个类库，它提供的API支持使用了&lt;code&gt;.NET Platform&lt;/code&gt;的应用程序的任何分支和版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用net-framework和net-core编写应用程序&#34;&gt;使用&lt;code&gt;.NET Framework&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;编写应用程序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实质&lt;/strong&gt;：使用&lt;code&gt;.NET Framework&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;编写应用程序就是使用支持&lt;code&gt;.NET Framework&lt;/code&gt;的任何一种语言使用&lt;code&gt;.NET代码库·&lt;/code&gt;编写代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IDE&lt;/strong&gt;：本书使用Visual Studio进行开发，是一种强大的集成开发环境，支持C#（以及托管和非托管C++，Visual Basic和其他一些语言）。这个环境的优点是便于将.NET 功能集成到代码中，我们创建的代码完全是C#代码，但是使用了&lt;code&gt;.NET Framework&lt;/code&gt;，并在需要的时候利用了Visual Studio中的其他工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;编译&lt;/strong&gt;：为了执行C#代码，必须把它们转换为目标操作系统能理解的语言，即&lt;strong&gt;本机代码(native code)&lt;/strong&gt;。这一过程叫做&lt;strong&gt;编译(compiling)代码&lt;/strong&gt;，由编译器执行。在&lt;code&gt;.NET Framework&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;下，这个过程包括两个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CIL和JIT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;.NET Framework&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;库编写的代码$\longrightarrow$通用中间语言(common Intermediate Language, CIL)$\longrightarrow$本机代码(native code)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通用中间语言(common Intermediate Language, CIL)&lt;/strong&gt;：并非专门用于任何一种操作系统，也并非专门用于C#，其他.NET语言也会在第一阶段编译为这种语言。开发C#应用程序时，这个编译步骤由Visual Studio完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Just-in-time编译器&lt;/strong&gt;：JIT负责把CIL编译为专用于OS和目标机器架构的本机代码，这样OS才能够执行应用程序&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;程序集(assembly)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编译应用程序时，所创建的CIL代码存储在一个程序集中.程序集中包括可执行的应用程序文件(&lt;code&gt;.exe&lt;/code&gt;)、其他应用程序使用的库(&lt;code&gt;.dll&lt;/code&gt;)、元信息（程序集包含的信息）、一些可选资源（CIl使用的其他数据：声音文件和图片等）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;元信息允许程序集是完全自描述的，不需要其他信息就可以使用程序集。也就是说，我们不会遇到没有把需要的数据添加到系统注册表中这样的问题，而在使用其他平台进行开发时这个问题常常会出现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署应用程序只需要把文件复制到远程计算机上，因为不需要目标系统上的其他信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;针对&lt;code&gt;.NET Framework&lt;/code&gt;的应用程序，只需要从该目录中运行可执行文件即可（假定安装了.NET CIL），而针对&lt;code&gt;.NET Core&lt;/code&gt;的应用程序，运行 该程序需要的所有模块都包含在部署包内，不需要进行其他配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全局程序集缓存(Global Assembly Cache, GAC)&lt;/strong&gt;：在&lt;code&gt;.NET Framework&lt;/code&gt;中一些代码可以被多个应用程序重用，这些可重用的代码放在所有应用程序都可以访问的地方，也就是全局程序集缓存。只需要把包含代码的程序集放在该缓存的目录下即可实现把代码放在缓存中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;托管代码&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**托管功能：**将代码编译为本机代码后，CLR/CoreCLR还需要管理正在执行的代码，方式是管理内存、处理安全性以及允许进行跨语言调试等。在C#中，我们编写的代码将使用CLR/CoreCLR的托管功能让.NET处理与操作系统的任何交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;垃圾回收&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;托管代码的最重要的功能是垃圾回收，这一.NET方法可以确保应用程序不在使用某些内存时就会完全释放这些内存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;把它们组合在一起&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用.NET兼容语言（如C#）编写&lt;em&gt;应用程序代码&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将代码编译为&lt;em&gt;CIL&lt;/em&gt;，存储在程序集中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在执行代码时（如果这是一个可执行文件就自动运行，或者在其他代码使用它时运行），首先必须使用JIT编译器将代码编译为&lt;em&gt;本机代码&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在托管的CLR/CoreCLR环境中&lt;em&gt;运行本机代码&lt;/em&gt;以及其他应用程序或进程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;链接(Linking)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在上述第2步中的C#代码未必在一个单独的文件中，可以把应用程序代码放在多个源代码文件中，再把它们编译到一个单独的程序集中，这个过程叫做链接(linking)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c的含义&#34;&gt;C#的含义&lt;/h2&gt;
&lt;p&gt;C#语言是一种类型安全的语言，在类型之间转换时，必须遵守严格的规则。执行相同的任务时，用C#编写的代码往往比C++编写的代码要长，但C#代码更加健壮，调试起来也比较简单，.NET始终可以准送数据的类型&lt;/p&gt;
&lt;h3 id=&#34;用c可以编写什么样的应用程序&#34;&gt;用C#可以编写什么样的应用程序&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.NET Framework&lt;/code&gt;没有限制应用程序的类型，C#使用的是&lt;code&gt;.NET Framework&lt;/code&gt;，因此也没有限制应用程序类型，实际上目前使用.NET Core只可以编写Console和ASP.NET应用程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;桌面应用程序：这些应用程序（如Microsoft Office）具有我们很熟悉的Windows外观和操作方式，使用.NET Framework的Windows Presentation Foundation(WPF)模块就可以简便地生成这种应用程序。WPF是一个控件库8，其中的控件（如按钮、工具栏、菜单等）而用于建立Windows用户界面(UI)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows Store应用程序：这是Windows8中引入的一类新的应用程序，此类应用程序主要针对触摸设备设计，通常全屏运行，侧重点在简洁清晰。创建这类应用程序的方式有很多种，包括使用WPF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;云/Web应用程序：&lt;code&gt;.NET Framework&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;包括一个动态生成Web内容的强大系统——ASP.NET，允许进行个性化和实现安全性等。另外，这些应用程序可以在云中驻留和访问，例如Microsoft Azure平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web API：这是建立REST风格的HTTP服务的理想框架，支持许多客户端，包括移动设备和浏览器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WCF服务：这是一种灵活创建各种分布式应用程序的方式，使用WCF服务可以通过局域网或Internet交换几乎各种数据。无论使用声明语言创建WCF服务，也无论WCF服务驻留在什么系统上，都使用一种简单的语法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些类型的应用程序也可能需要某种形式的数据库访问，这可以通过.NET Framework的Active Data Object .NET(ADO.NET)部分，ADO.NET Entity Framework或C#的LINQ(Language Integrated Query)功能来实现。对于需要数据库访问的.NET Core应用程序将使用ENtity Framework Core库。也可以使用许多其他资源。例如，创建联网组件、输出图形、执行复杂数学任务的工具来实现。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-2017&#34;&gt;Visual Studio 2017&lt;/h2&gt;
&lt;h2 id=&#34;本章要点&#34;&gt;本章要点&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;要点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt;和&lt;code&gt;.NET Core&lt;/code&gt;基础&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt;是Microsoft最新的开发平台，目前的版本是4.7。它包括一个公共类型库(CTS)和一个公共语言类型库(CLR/CoreCLR)。&lt;code&gt;.NET Framework&lt;/code&gt;应用程序使用面向对象编程的方法论进行编写，通常包含托管代码、托管代码的内存管理有.NET运行库处理，其中包括垃圾回收。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt;应用程序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用&lt;code&gt;.NET Framework&lt;/code&gt;编写的应用程序首先编译为CIL，在执行应用程序时，JIT把CIL编译为本机代码。应用程序编译后，把不同部分链接到包含CIL的程序集中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Core&lt;/code&gt;应用程序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Core&lt;/code&gt;应用程序的工作方式与&lt;code&gt;.NET Framework&lt;/code&gt;应用程序类似，但不使用CLR，而是使用CoreCLR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Standard&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;.NET Standard&lt;/code&gt;提供了一个统一的类库，多个.NET平台（如&lt;code&gt;.NET Framework&lt;/code&gt;,&lt;code&gt;.NET Core&lt;/code&gt;,&lt;code&gt;Xamarin&lt;/code&gt;）都可以将它作为目标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C#基础&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C#是包含在&lt;code&gt;.NET Framework&lt;/code&gt;中的一种语言，是已有语言（如C++）的一种演变，可用来编写任意应用程序，包括Web应用程序、跨平台应用程序、桌面应用程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;集成开发环境(IDE)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可在Visual Studio 2017中用C#编写任意类型的.NET应用程序，还可以子免费的但功能稍弱的Community产品中用C#创建.NET应用程序。IDE使用解决方案，解决方案可以包含多个项目。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第二章-编写c应用程序&#34;&gt;第二章 编写C#应用程序&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;要点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Visual Studio 2017设置&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;本书需要在第一次运行Visual Studio2017时厕C# Development Setting选项或者重置它们&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;控制台应用程序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;控制台应用程序是最简单的命令行应用程序，本书主要通过它来演示技术。在Visual Studio中创建新项目时，，使用Console Application模板就会创建新的控制台应用程序。要在调试模式下运行项目，可以使用“调试|开始调试”或者按下F5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IDE窗口&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;项目内容显示在项目资源管理器窗口中，所选中项的属性在属性窗口中，错误提示在错误列表中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;桌面应用程序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;桌面应用程序具备标准Windows应用程序的外观和操作方式，包括最大化、最小化和关闭应用程序等大家熟悉的图标。它们是在New Project对话框中使用WPF Application模板创建的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第三章-变量和表达式&#34;&gt;第三章 变量和表达式&lt;/h1&gt;
&lt;h2 id=&#34;c的基本语法&#34;&gt;C#的基本语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;空白字符&lt;/strong&gt;：C#编译器不考虑代码中的空格、回车符、制表符，它们统称为空白字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分号&lt;/strong&gt;：C#代码由一系列语句组成，每条语句以一个分号结束。一行可以有多条语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;块结构&lt;/strong&gt;：C#是一种块结构的语言，所有语句都是代码块的一部分。使用花括号来界定代码块，代码块中可以包含任意多行语句。代码块末尾不需要加分号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注释&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单行注释&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 这是单行注释&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多行注释&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*这是
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;多行注释
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三类注释&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;///这是第三类注释，通过配置Visual Studio可以在编译项目时提取注释后面的文本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;///创建一个特殊格式的文本文件，该文件可以用来创建文档&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;大小写敏感&lt;/strong&gt;：C#语言是严格区分大小写的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变量及其用法&#34;&gt;变量及其用法&lt;/h2&gt;
&lt;h3 id=&#34;简单类型&#34;&gt;简单类型&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;简单类型就是组成应用程序中基本构件的类型，例如数值和布尔值。与复杂类型不同，简单类型没有子类型或特性，大多数简单类型都是存储数值的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;整数类型&#34;&gt;整数类型&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;别名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;允许的值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;sbyte&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.SByte&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-128~127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;byte&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Byte&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0~255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;short&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Int16&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-32768~32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ushort&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.UInt16&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0~65535&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Int32&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-2147483648~2147483647&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;uint&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.UInt32&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0~4294967295&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;long&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Int64&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-9223372036854775808~922372036854775807&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ulong&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.UInt64&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0~18446744073709551615&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$2^8=256$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$2^{16} = 65536$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$2^{32} = 4294967296$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$2^{32} =  18446744073709551616$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些类型中的每一种都利用了&lt;code&gt;.NET Framework&lt;/code&gt;中定义的标准类型，使用标准类型可以在语言之间交互操作。在C#中这些类型的名称是Framework中定义的类型的别名。&lt;/p&gt;
&lt;h4 id=&#34;浮点类型&#34;&gt;浮点类型&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;别名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;m的最小值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;m的最大值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;e的最小值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;e的最大值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;近似的最小值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;近似的最大值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;float&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Single&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$0$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$2^{24}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$-149$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$104$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$1.5\times 10^{-45}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$3.4\times10^{38}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;double&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Double&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$0$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$2^{53}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$-1057$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$970$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$5.0\times 10^{-324}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$1.7\times 10^{308}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;decimal&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Decimal&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$0$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$2^{96}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$-28$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$0$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$1.0\times 10^{-28}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$7.9\times 10^{28}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;float和double存储浮点数的方式为$\pm m \times 2^e$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;decimal存储浮点数的方式为$\pm m\times 10^e$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文本和布尔类型&#34;&gt;文本和布尔类型&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;别名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;允许的值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;char&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Char&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;一个Unicode字符，存储在0~65535之间的整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;bool&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.Boolean&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;布尔值：true或false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;System.String&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;一个字符序列&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;string的字符数量没有上限，因为它可以使用可变大小的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变量的命名&#34;&gt;变量的命名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变量的第一个字母必须是字符、下划线或@&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其后的字符可以是字母、下划线或数字&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字面值&#34;&gt;字面值&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类别&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;后缀&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;实例/允许的值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;bool&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;布尔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true和false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int,uint,long,ulong&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;uint,ulong&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;u,U&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;long,ulong&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;l,L&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100L&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ulong&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ul,uL,Ul,UL,lu,lU,Lu,LU&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100UL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;float&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;实数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;f,F&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.5F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;double&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;实数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无, d, D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;decimal&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;实数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;m, M&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.5M&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;char&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lsquo;a&amp;rsquo;或转义序列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字符串&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lsquo;a&amp;hellip;a&amp;rsquo;，可以包含转义序列&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;二进制字面值与数字分隔符&#34;&gt;二进制字面值与数字分隔符&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;二进制模式匹配和位掩码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C#7中的二进制字面值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] numbers = [&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] numbers  = [ob00001, ob00010, ob00100, ob01000, ob10000];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C#7中的数字分隔符&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] numbers = [&lt;span style=&#34;color:#b452cd&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;128&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] numbers = [ob0010_0000, ob0100_0000, ob1000_0000];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; Pi = &lt;span style=&#34;color:#b452cd&#34;&gt;3.141&lt;/span&gt;_592_653_589_793_238_462_643_383_279_502;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字符串字面值&#34;&gt;字符串字面值&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;字符串字面值的转义序列&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;转义序列&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;产生的字符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;字符从Unicode值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单引号&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0027&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;双引号&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\\&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;反斜杠&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x005C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;null&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\a&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;警告（产生蜂鸣）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0007&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;退格&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\f&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;换页&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x000C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\n&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;换行&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x000A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\r&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;回车&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x000D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\t&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;水平制表符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0009&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\v&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;垂直制表符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x000B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;字符的Unicode值指的是字符在Unicode字符集中的十六进制值值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转移序列包括标准的\字符后面跟一个u和一个4位十六进制值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Benjamin\&amp;#39;s string&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Benjmin\u0027s string&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;一字不变地引用字符串&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;反斜杠&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;@“&lt;/span&gt;C:&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;Users&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;srxh&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;Desktop&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;C_Sharp_Learn&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;”&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;C:\\Users\\srxh\\Desktop\\C_Sharp_Learn&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多行字符串&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;@&amp;#34;A short list；
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;item 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;item 2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;字符串是引用类型，本章中的其他类型都是值类型，所以字符串也可以被赋值为null值，表示字符串变量不引用字符串（或其他东西）&lt;/p&gt;
&lt;h2 id=&#34;表达式及其用法&#34;&gt;表达式及其用法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把操作数（变量和字面值）和运算符组合起来就可以创建表达式，它是计算的基本构件，C#中包含许多执行这类处理的运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运算符包括：数学运算符、逻辑运算符、赋值运算符、其他复杂的二进制运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预算符大致分为三类：一元运算符（几个）、二元运算符（最常见）、三元运算符（只有一个，即条件运算符）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数学运算符&#34;&gt;数学运算符&lt;/h3&gt;
&lt;h4 id=&#34;二元运算符&#34;&gt;二元运算符&lt;/h4&gt;
&lt;p&gt;$+$：数学加法，字符串连接&lt;/p&gt;
&lt;p&gt;$-$：数学减法&lt;/p&gt;
&lt;p&gt;$*$：数学乘法&lt;/p&gt;
&lt;p&gt;$/$：数学除法&lt;/p&gt;
&lt;p&gt;$%$：取余数&lt;/p&gt;
&lt;h4 id=&#34;一元运算符&#34;&gt;一元运算符&lt;/h4&gt;
&lt;p&gt;$+$：某数乘以1&lt;/p&gt;
&lt;p&gt;$-$：某数乘以-1&lt;/p&gt;
&lt;h4 id=&#34;递增和递减运算符&#34;&gt;递增和递减运算符&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 = var2 ++; &lt;span style=&#34;color:#228b22&#34;&gt;// var1值为var2, var2递增1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 = var2 --; &lt;span style=&#34;color:#228b22&#34;&gt;// var1值为var2, var2递减1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 = ++ var2; &lt;span style=&#34;color:#228b22&#34;&gt;// var1值为var2 + 1, var2递增1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 = -- var2; &lt;span style=&#34;color:#228b22&#34;&gt;// var1值为var2 - 1, var2递减1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;赋值运算符&#34;&gt;赋值运算符&lt;/h3&gt;
&lt;p&gt;$=$：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 = var2;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$-=$：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 -= var2;&lt;span style=&#34;color:#228b22&#34;&gt;// var1 = var1 - var2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$+=$：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 += var2;&lt;span style=&#34;color:#228b22&#34;&gt;// var1 = var1 + var2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$*=$：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 *= var2;&lt;span style=&#34;color:#228b22&#34;&gt;// var1 = var1 * var2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$/=$：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 /= var2;&lt;span style=&#34;color:#228b22&#34;&gt;// var1 = var1 / var2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$%=$：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var1 %= var2;&lt;span style=&#34;color:#228b22&#34;&gt;// var1 = var1 % var2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;运算符的优先级&#34;&gt;运算符的优先级&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;运算符由高到低&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;++, &amp;ndash;（用作前缀）；+, -（一元运算符）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*, /, %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+, -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;=, *=, /=, %=, +=, -=&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;++, &amp;ndash;（用作后缀）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;括号可以重写运算符优先级&lt;/p&gt;
&lt;h3 id=&#34;名称空间&#34;&gt;名称空间&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;名称空间是.NET中提供应用程序代码容器的方式，这样就可以唯一地标识代码及其内容。名称空间也用作&lt;code&gt;.NET Framework&lt;/code&gt;中给项分类的一种方式。大多数项都是类型定义，例如System.Int32&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;namesapce关键字为花括号中的代码块显式定义名称空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C#代码包含在全局名称空间中，对于包含在这段代码中的项，全局名称空间中的其他代码只要通过名称进行引用，就可以访问它们&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在名称空间代码的外部使用名称空间中的名称，就必须写出该名称空间中的限定名称&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限定名称包括它所有的分层信息，在不同名称空间级别之间使用句点字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;using语句本身不能访问另一个名称空间中的名称，除非名称空间中的代码已某种方式链接到项目上，或者代码是在该项目的源文件中定义的，或者是在链接到该项目的其他代码中定义的，否则就不能访问其中包含的名称。另外，如果包含名称空间的代码连接到项目上，那么无论是否使用using，都可以访问其中包含的名称。using语句便于我们访问这些名称，减少代码量以及提高可读性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Collections.Generic&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Linq&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Text&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Threading.Tasks&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以&lt;code&gt;using&lt;/code&gt;关键字开头的5段代码声明在这段C#代码中使用System, System.Collections.Generic, System.Linq, System.Text, System.Threading.Tasks名称空间，它们可以在该文件的所有名称空间中访问，不必进行限定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System名称空间是&lt;code&gt;.NET Framework&lt;/code&gt;应用程序的根名称空间，包含控制台应用程序需要的所有基本功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他四个名称空间常用于控制台应用程序，所有该程序包含了它们&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C#6新增了&lt;code&gt;using static&lt;/code&gt;关键字，允许把静态成员直接包含到C#程序的作用域中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;static&lt;/span&gt; Syatem.Console;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;不需要添加静态类名System.Console&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;要点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C#基本语法&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C#是一种区分大小写的语言，每行代码都已分号结束，如果代码太长或者想要标识嵌套的块，可以缩进代码行以便阅读。使用//或/**/语法可以包含不便宜的注释。代码块可以隐藏到区域中，也是为了方便阅读。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;变量&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;变量是有名称和类型的数据块，&lt;code&gt;.NET Framework&lt;/code&gt;定义了大量简单类型，例如数字和字符串（文本）类型，以供使用。变量只有经过声明和初始化后才能使用。可以把字面值付给变量，以初始化它们。变量还可以在单个步骤中声明和初始化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;表达式&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;表达式利用运算符和操作数来加你离，其中运算符对操作数执行操作，运算符有3种，一元、二元、三元运算符。它们分别操作1，2，3个操作数。数学运算符对数值执行操作，赋值运算符把表达式的结果放在变量种。运算符有固有的优先级，优先级确定了运算符在表达式中的处理顺序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;名称空间&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.NET应用程序中定义的所有名称，包括变量名都包含在名称空间中。名称空间采用层次结构，我们通常需要根据包含的名称空间来限定名称，以便访问它们。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;第四章-流程控制&#34;&gt;第四章 流程控制&lt;/h1&gt;
&lt;h2 id=&#34;布尔逻辑的用法&#34;&gt;布尔逻辑的用法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;布尔比较运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类别&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;示例表达式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;==&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 == var3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;!=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 != var3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 &amp;gt; var3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;gt;=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 &amp;gt;= var3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 &amp;lt; var3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 &amp;lt;= var3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;条件布尔运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类别&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;示例表达式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&amp;amp;（条件逻辑与）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 &amp;amp;&amp;amp; var3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;||（条件逻辑或）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 = var2 || var3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;amp;&amp;amp;的运算结果与&amp;amp;相同，但是性能更好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;||的运算结果与|相同，但是性能更好&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;布尔按位运算符和赋值运算符&#34;&gt;布尔按位运算符和赋值运算符&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类别&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;示例表达式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;=（逻辑与）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 &amp;amp;= var2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;|=（逻辑或）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 |= var2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;^=（逻辑异或）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var1 ^= var2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;运算符优先级的更新&#34;&gt;运算符优先级的更新&lt;/h4&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;h2 id=&#34;如何控制代码的分支&#34;&gt;如何控制代码的分支&lt;/h2&gt;
&lt;h3 id=&#34;三元运算符&#34;&gt;三元运算符&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;test&amp;gt; ? &amp;lt;resultIsTrue&amp;gt; : &amp;lt;resultIsFalse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果&lt;code&gt;test&lt;/code&gt;语句真值为&lt;code&gt;True&lt;/code&gt;则为&lt;code&gt;&amp;lt;resultIsTrue&amp;gt;&lt;/code&gt;语句，否则为&lt;code&gt;&amp;lt;resultIsFalse&amp;gt;&lt;/code&gt;语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; isLessThan10 = myInteger &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; myStr = isLessThan10 ? &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The integer is less than 10&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The integer is greater than 10 or equal to 10&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;if语句&#34;&gt;if语句&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&amp;lt;test&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;code executed &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;test&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;code executed &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;gt;test&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; resultString;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (myInteger &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resultString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The integer is less than 10&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resultString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The integer is greater than 10 or equal to 10&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用if判断更多条件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (var1 == &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// Do somthing.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// Do somthing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// Do somthing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (var1 == &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// Do somthing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (var1 &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// Do somthing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// Do somthing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;switch语句&#34;&gt;switch语句&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (&amp;lt;testVal&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &amp;lt;comparisonVal1&amp;gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVal&amp;gt; == &amp;lt;comparisonVal1&amp;gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &amp;lt;comparisonVal2&amp;gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;；&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVal&amp;gt; == &amp;lt;comparisonVal2&amp;gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVal&amp;gt; != &amp;lt;comparisionVals&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;testVal&lt;/code&gt;中的值与&lt;code&gt;comarisonVals&lt;/code&gt;分别进行比较，如果有一个匹配，就执行为该匹配提供的语句；如果没有匹配但是有&lt;code&gt;default&lt;/code&gt;语句，就执行这部分的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行完每部分的代码后都要有一个&lt;code&gt;break&lt;/code&gt;语句，将中断switch语句执行该结构后面的语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何编写循环代码&#34;&gt;如何编写循环代码&lt;/h2&gt;
&lt;h3 id=&#34;do循环&#34;&gt;do循环&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;code to be looped&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(&amp;lt;Test&amp;gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;while循环&#34;&gt;while循环&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&amp;lt;Test&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;code to looped&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;for循环&#34;&gt;for循环&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&amp;lt;initialization&amp;gt;; &amp;lt;condition&amp;gt;; &amp;lt;operation&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;code to loop&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等价于&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;initialization&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(&amp;lt;condition&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;code to loop&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;operation&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;循环的中断&#34;&gt;循环的中断&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;break：&lt;/code&gt;立即终止循环&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;continue：&lt;/code&gt;立即终止当前的循环（执行下一次循环）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;return：&lt;/code&gt;跳出循环及包含该循环的函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;无限循环&#34;&gt;无限循环&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//code to loop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(i &amp;lt;= &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((i % &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;) == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;{i++}&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;存疑：第四章习题2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;本章要点-1&#34;&gt;本章要点&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;要点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;布尔逻辑&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;布尔逻辑使用布尔值(true 和false)计算条件。布尔运算符用于比较数值，返回布尔结果。一些布尔运算符也用于对数值的底层位结构执行按位操作，还有一些专门的按位运算符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分支&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可使用布尔逻辑控制程序流。计算结果为布尔值的表达式可用确定是否执行某个代码块，可以使用if语句或三元运算符(?:)进行简单的分支，或者使用switch语句同时检查多个条件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;循环&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;循环允许根据指定的条件多次执行代码块。使用do循环和while循环可在布尔表达式为true时执行代码，使用for循环可在循环代码中包含一个计数器。循环可以使用continue中断当前的迭代，或使用break完全中断。一些循环只能在用户强制中断时结束，这些循环称为无限循环。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第五章-变量的更多内容&#34;&gt;第五章 变量的更多内容&lt;/h1&gt;
&lt;h2 id=&#34;如何在类型之间进行隐式和显式转换&#34;&gt;如何在类型之间进行隐式和显式转换&lt;/h2&gt;
&lt;h3 id=&#34;隐式转换&#34;&gt;隐式转换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无论什么变量类型，所有的数据都是一系列的位，变量的含义是通过解释这些数据的方式来确定的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;方式&lt;/strong&gt;：直接进行赋值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;ushort&lt;/span&gt; destinationVar;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; sourceVar = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;destinationVar = sourceVar;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;sourceVar:{sourceVar}&amp;#34;&lt;/span&gt;);          &lt;span style=&#34;color:#228b22&#34;&gt;//输出a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;destinationVar:{destinationVar}&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;//输出97&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;条件&lt;/strong&gt;：转化为的类型所存储的数字的范围要比被转化的类型所存储的数字的范围要大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;char类型用一个数字表示Unicode字符集中的一个字符，char和ushort都存储0~65535之间的数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;显式转换&#34;&gt;显式转换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;适用范围&lt;/strong&gt;：转化为的类型所存储的数字的范围要比被转化的类型所存储的数字的范围要小，但是被转化的数字在将要转化为的类型所存储的数字的范围之内，这时可以进行强制转换&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt; destinationVar;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;short&lt;/span&gt; sourceVar = &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;destinationVar = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;) sourceVar;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;desinationVar {destinationVar}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;sourceVar {sourceVar}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;**方式：**在被转化数字前面添加将要转化为的类型，之后进行赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;溢出检查&#34;&gt;溢出检查&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;转化为的类型所存储的数字的范围要比被转化的类型所存储的数字的范围要小，被转化的数字也在将要转化为的类型所存储的数字的范围之外，这时进行强制转换（显式转换）将会出现溢出的现象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于为表达式设置的所谓溢出检查上下文，需要用到两个关键字：&lt;code&gt;checked&lt;/code&gt;和&lt;code&gt;unchecked&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt; destinationVar;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;short&lt;/span&gt; sourceVar = &lt;span style=&#34;color:#b452cd&#34;&gt;281&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;destinationVar = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;checked&lt;/span&gt;((&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;) sourceVar);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;desinationVar {destinationVar}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;sourceVar {sourceVar}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;checked&lt;/code&gt;会检查在类型转换中是否出现数据溢出的现象，如果出现的话程序会崩溃&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unchecked&lt;/code&gt;不会检查在类型转换中是否出现数据溢出的现象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也可以在Visual Studio中进行设置，让IDE检查是否在类型转换中出现数据溢出的现象，这时就不用&lt;code&gt;checked&lt;/code&gt;关键字&lt;/p&gt;
&lt;p&gt;具体设置方法如下：&lt;/p&gt;
&lt;p&gt;$$
项目\rightarrow 属性\rightarrow 生成\rightarrow高级\rightarrow检查运算上溢/下溢
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这一设置可能会对程序执行速度带来一定的影响，因此当不再需要时就禁用这个设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;使用convert命令进行显式转换&#34;&gt;使用&lt;code&gt;Convert&lt;/code&gt;命令进行显式转换&lt;/h3&gt;
&lt;p&gt;前面的很多代码中都使用&lt;code&gt;ToDouble&lt;/code&gt;将输入的字符串转化为&lt;code&gt;Double&lt;/code&gt;类型的浮点数，但是字符串必须是一个数值的有效表达方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;可选符号（加号或减号）&lt;/code&gt;+&lt;code&gt;0位或多位数字&lt;/code&gt;+&lt;code&gt;可选句点&lt;/code&gt;+&lt;code&gt;0位或多位数字&lt;/code&gt;+&lt;code&gt;可选的e或E&lt;/code&gt;+&lt;code&gt;可选符号（加号或减号）&lt;/code&gt;+&lt;code&gt;一位或多位数字&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除了可能还有空格（在序列前或后），不能有其他字符&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使用&lt;code&gt;Convert&lt;/code&gt;进行转换，总是要进行溢出检查，&lt;code&gt;checked&lt;/code&gt;和&lt;code&gt;unchecked&lt;/code&gt;关键字以及上面配置的属性设置不起作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;如何创建和使用枚举类型&#34;&gt;如何创建和使用枚举类型&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; &amp;lt;typeName&amp;gt; : &amp;lt;underlyingType&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;value1&amp;gt; = &amp;lt;actualVal1&amp;gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;value2&amp;gt; = &amp;lt;actualVal2&amp;gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;valueN&amp;gt; = &amp;lt;actualValN&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;未赋值的任何值会自动获得一个初始值，这个初始值是比上一明确声明的值大1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以使用一个值作为另一个的基础值：&lt;code&gt;&amp;lt;value2&amp;gt; = &amp;lt;value1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类型的定义代码放在名称空间中，与Main函数并列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;valueN&amp;gt;&lt;/code&gt;的类型为&lt;code&gt;&amp;lt;underlyingType&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;枚举类型直接输出为对应的名称&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    ```c#
    origination myDirection;
    myDirection = origination.north;
    WriteLine($&amp;quot;myDirection = {myDirection}&amp;quot;); // 输出为myDirection = north
    ```
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类型转换&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum origination : byte
{
    north = 1,
    south = 2,
    west = 3,
    east = 4
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;枚举类型转化为基本类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;        ```c#
        origination myDirection;
        myDirection = origination.north;
        byte myDirectionByte = (byte) myDirection; //  myDirectionByte = 1
        ```

*   枚举类型转化为字符串类型

    *

        ```c#
        origination myDirection;
        myDirection = origination.north;
        string myString = Convert.ToString(myDirection); //myDirectionString = &amp;quot;north&amp;quot;
        ```

*   基本类型转化为枚举类型

    *

            byte myByte = 1;
            myDirection = (origination) myByte;

*   字符串类型转化为枚举类型

    *

        ```c#
        string myString = &amp;quot;north&amp;quot;;
        origination myDirection = (origination) Enum.Parse(typeof(origination), myString);
        ```
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;如何创建和使用结构类型&#34;&gt;如何创建和使用结构类型&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; &amp;lt;typeName&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;accessibility1&amp;gt; &amp;lt;type1&amp;gt; &amp;lt;name1&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;accessibility2&amp;gt; &amp;lt;type2&amp;gt; &amp;lt;name2&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结构类型也放在名称空间内，与Main函数并列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过使用&lt;code&gt;.&lt;/code&gt;来对结构内的属性进行i引用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何创建和使用数组&#34;&gt;如何创建和使用数组&lt;/h2&gt;
&lt;h3 id=&#34;数组的声明&#34;&gt;数组的声明&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;方式&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;baseType&amp;gt; [] &amp;lt;name&amp;gt; = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &amp;lt;baseType&amp;gt; [ArraySize] {..,..,...}; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] myArray = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;]; &lt;span style=&#34;color:#228b22&#34;&gt;//数组大小(可以略过这一步，直接赋给数组内容)，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myArray = {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;}; &lt;span style=&#34;color:#228b22&#34;&gt;//数组内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;需要注意的是：第一行数组大小传入的参数是字面值或者常量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] myArray = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [i];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;foreach循环&#34;&gt;foreach循环&lt;/h3&gt;
&lt;p&gt;foreach循环可以使用一种简便的语法可以定位数组中的每个元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只能对数组内容进行访问，不能改变任何元素的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;方式&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&amp;lt;baseType&amp;gt; &amp;lt;name&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; &amp;lt;array&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//can use &amp;lt;name&amp;gt; for each element&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; friendName &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; friendsName)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(friendName);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用switch-case表达式进行模式匹配&#34;&gt;使用switch case表达式进行模式匹配&lt;/h3&gt;
&lt;p&gt;C#7中可以基于变量的类型在switch case中进行模式匹配&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(&amp;lt;testVar&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVar&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; an &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        bresk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; s when s.Length == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVar&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; an &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; and the length of it &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVar&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;code to execute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &amp;lt;testVar&amp;gt; != comparisonVals&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        bresk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;case关键字后面紧跟的是想要检查的变量类型，之后是一个声明的变量。&lt;code&gt;&amp;lt;testVar&amp;gt;&lt;/code&gt;的值将保存到声明的变量中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C#7中的when关键字修饰符应用到了switchh case表达式中，when关键字修饰符允许扩展或添加一些额外的条件，以执行case语句中的代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多维数组矩形数组&#34;&gt;多维数组（矩形数组）&lt;/h3&gt;
&lt;h4 id=&#34;声明与初始化&#34;&gt;声明与初始化&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;baseType&amp;gt; [,] &amp;lt;name&amp;gt; = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &amp;lt;baseType&amp;gt; [i,j]; &lt;span style=&#34;color:#228b22&#34;&gt;//n个逗号声明n+1维数组&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//上面示例中声明了二维数组，第一层有i个数组，每个数组有j个元素&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; [,] doubleArray = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doubleArray = {{&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;},{&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;}};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;引用&#34;&gt;引用&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;name&amp;gt;[a,b];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doubleArray[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];&lt;span style=&#34;color:#228b22&#34;&gt;//2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;遍历&#34;&gt;遍历&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; number &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; doubleArray)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;{nnumber}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//遍历顺序为doubleArray[0,0],doubleArray[0,1]...doubleArray[1,2]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;数组的数组锯齿数组&#34;&gt;数组的数组（锯齿数组）&lt;/h3&gt;
&lt;h4 id=&#34;声明&#34;&gt;声明&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;baseType&amp;gt; []...[] jaggedArray;&lt;span style=&#34;color:#228b22&#34;&gt;//有多少括号就是几维的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [][] jaggedArray;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;初始化&#34;&gt;初始化&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;初始化需要层层初始化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [][] jaggedArray;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jaggedArray = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;][];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jaggedArray[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jaggedArray[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以使用下面的方式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [][] jaggedArray;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jaggedArray = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;][] {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;遍历-1&#34;&gt;遍历&lt;/h4&gt;
&lt;p&gt;遍历也需要层层遍历&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [][] divisors1To10 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;][];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;divisors1To10 = {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;( &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] divisorOfInt &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; divisors1To10)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; divisor &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; divisorOfInt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;{divisor}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如何处理字符串&#34;&gt;如何处理字符串&lt;/h2&gt;
&lt;h3 id=&#34;string类型可以看作char变量的只读数组&#34;&gt;string类型可以看作char变量的只读数组&lt;/h3&gt;
&lt;p&gt;使用下面的语法访问每个字符，不能对字符串进行改写！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;A String&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; myChar = myString[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];&lt;span style=&#34;color:#228b22&#34;&gt;//mychar为&amp;#39; &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获得char数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;A String&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; [] myChars = myString.ToCharArray();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;遍历字符串&#34;&gt;遍历字符串&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; myChar &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; myString)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;{myChar}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;字符串长度&#34;&gt;字符串长度&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; stringLength = myString.Length;&lt;span style=&#34;color:#228b22&#34;&gt;//字符串长度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;字符串大小写&#34;&gt;字符串大小写&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myUpperString = myString.ToUpper();&lt;span style=&#34;color:#228b22&#34;&gt;//字符串全部字符大写&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myLowerString = myString.ToLower();&lt;span style=&#34;color:#228b22&#34;&gt;//字符串全部字符小写&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ToUpper()&lt;/code&gt;和&lt;code&gt;ToLower()&lt;/code&gt;并不会改变&lt;code&gt;myString&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;删除字符串前后的空格&#34;&gt;删除字符串前后的空格&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; userResponse = ReadLine();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userResponse = userResponse.Trim();&lt;span style=&#34;color:#228b22&#34;&gt;//删除字符串前后的空格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userResponse = userResponse&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;。&lt;/span&gt;TrimStart();&lt;span style=&#34;color:#228b22&#34;&gt;//删除字符串前的空格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userResponse = userResponse.TrimEnd();&lt;span style=&#34;color:#228b22&#34;&gt;//删除字符串后的空格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;删除字符串中指定的字符&#34;&gt;删除字符串中指定的字符&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; [] trimChars = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; userResponse = ReadLine();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userResponse = userResponse.Trim(trimChars);&lt;span style=&#34;color:#228b22&#34;&gt;//删除字符串中指定的字符&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userResponse = userResponse.TrimStart(trimChars);&lt;span style=&#34;color:#228b22&#34;&gt;//删除字符串前出现的连续的指定字符，直到下一个字符不在trimChars内&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userResponse = userResponse.TrimEnd(trimChars);&lt;span style=&#34;color:#228b22&#34;&gt;//删除字符串后出现的连续的指定字符，直到下一个字符不在trimChars内&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;向字符串中添加指定字符&#34;&gt;向字符串中添加指定字符&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myString = myString.PadLeft(&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;//在字符串左边添加字符-直至字符串长度为10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myString = myString.PadRight(&lt;span style=&#34;color:#b452cd&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;//在字符串右边添加空格直至字符串长度为13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结-1&#34;&gt;总结&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;要点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;类型转换&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;值可以从一种类型转换为另一种类型，但是在转换时应该遵循一些规则。隐式转换是自动进行的，但只有当源值类型的所有可能值都在目标值类型中使用时，才能进行隐式转换。也可以进行显式转换，但是可能得不到期望的值，甚至会出错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;枚举&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;枚举是包含一组离散值的类型，每个离散值都有一个名称。枚举用关键词&lt;code&gt;enum&lt;/code&gt;定义，以便在代码中理解它们，因为它们枚举的可读性都很强。枚举有基本的数值类型（默认为&lt;code&gt;int&lt;/code&gt;），可使用枚举值的这个属性在枚举值和数值之间转换，或者标识枚举值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;结构&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;结构是同时包含几个不同值的类型。结构使用&lt;code&gt;struct&lt;/code&gt;关键字定义。包含在结构中的每个值都有类型和名称，存储在结构中的每个值的类型不一定相同。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数组&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数组是同类型数值的集合。数组有固定的大小或长度，确定了数组可以包含多少个值。可以定义多维数组或锯齿数组来保存不同数量和形状的数据。还可以使用&lt;code&gt;foreach&lt;/code&gt;循环来迭代数组中的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第六章-函数&#34;&gt;第六章 函数&lt;/h1&gt;
&lt;h2 id=&#34;如何定义和使用既不接受任何数据也不返回任何数据的简单函数&#34;&gt;如何定义和使用既不接受任何数据也不返回任何数据的简单函数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; &amp;lt;functionName&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//code to execute without any return &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;关键字static和void&#34;&gt;关键字&lt;code&gt;static&lt;/code&gt;和&lt;code&gt;void&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt;与面向对象的概念相关，后面会进行讨论&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt;表示函数没有返回值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数名&#34;&gt;函数名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数名采用&lt;code&gt;PascalCase&lt;/code&gt;形式进行编写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数名后跟()，并且在调用函数时不仅要添加函数名也要添加()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;要执行的代码块&#34;&gt;要执行的代码块&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;要执行的代码块放在大括号内，&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对main函数的解释&#34;&gt;对Main函数的解释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义的函数的位置与Main函数的位置并列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Main函数是控制台应用程序的入口点函数，当执行C#应用程序时，就会调用它包含的入口点函数，这个函数执行完毕后，应用程序就终止了。所有C#代码必须有一个入口点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何在函数中传入和传出数据&#34;&gt;如何在函数中传入和传出数据&lt;/h2&gt;
&lt;h3 id=&#34;返回值&#34;&gt;返回值&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &amp;lt;returnType&amp;gt; &amp;lt;FunctionName&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//code to execute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;lt;returnValue&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;返回值&lt;code&gt;&amp;lt;returnValue&amp;gt;&lt;/code&gt;的类型必须为&lt;code&gt;&amp;lt;returnType&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数在任何情况下结束都必须有&lt;code&gt;return&lt;/code&gt;，不能存在任何一种情况函数执行完成后没有&lt;code&gt;return&lt;/code&gt;语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;只执行一行代码（return）的函数可以这样编写&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &amp;lt;returnTyoe&amp;gt; &amp;lt;FunctionName&amp;gt; () =&amp;gt; &amp;lt;returnValue&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;参数&#34;&gt;参数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &amp;lt;returnType&amp;gt; &amp;lt;FunctionName&amp;gt; (&amp;lt;paramType&amp;gt; &amp;lt;paramName&amp;gt;, ...)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//code to execute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;lt;returnValue&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数在定义时指定接受的参数列表以及这些参数的类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数在调用的时候提供匹配的实参列表&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参数匹配&#34;&gt;参数匹配&lt;/h4&gt;
&lt;p&gt;调用函数的时候必须使提供的参数与函数定义中指定的参数完全匹配：匹配参数的类型、个数和顺序&lt;/p&gt;
&lt;h4 id=&#34;参数数组&#34;&gt;参数数组&lt;/h4&gt;
&lt;p&gt;C#允许为函数指定一个特殊参数，这个参数必须是函数定义的最后一个参数，称为参数数组。参数数组允许使用个数不定的参数来调用函数，可以使用&lt;code&gt;params&lt;/code&gt;关键字定义它们。&lt;/p&gt;
&lt;p&gt;参数数组可以简化代码，因为在调用代码时不必传递数组，而是传递同类型的几个参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &amp;lt;returnType&amp;gt; &amp;lt;FunctionName&amp;gt; (&amp;lt;p1type&amp;gt; &amp;lt;p1Name&amp;gt;...,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;params&lt;/span&gt; &amp;lt;type&amp;gt; [] &amp;lt;name&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;lt;returnValue&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;FunctionName&amp;gt; (&amp;lt;p1&amp;gt;,...,&amp;lt;val1&amp;gt;,&amp;lt;val2&amp;gt;...)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;p1&lt;/code&gt;&amp;hellip;的类型为&lt;code&gt;p1type&lt;/code&gt;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;val1&lt;/code&gt;,&lt;code&gt;val2&lt;/code&gt;&amp;hellip;的类型为&lt;code&gt;type&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;引用参数和值参数&#34;&gt;引用参数和值参数&lt;/h3&gt;
&lt;h4 id=&#34;值参数&#34;&gt;值参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;**值参数：**在使用参数时，是把一个值传递给函数所使用的一个变量。在函数中对此变量的任何修改都不影响函数调用中指定的参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val doubled = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;调用&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; doubleNum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doubleNum = ShowDouble(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;num = {num}, doubleNum = {doubleNum}&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;// num为2,doubleNum为4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;引用参数&#34;&gt;引用参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;**引用参数：**函数处理的变量与函数调用中使用的变量相同，而不仅仅是值相同的变量。对该变量的任何修改都会影响用作参数的变量值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val doubled = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;调用&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; doubleNum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doubleNum = ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; num);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;num = {num}, doubleNum = {doubleNum}&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;// num为4,doubleNum为4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;num&lt;/code&gt;不能是常量：&lt;code&gt;const int num&lt;/code&gt;是错误的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;num&lt;/code&gt;必须经过初始化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ref用于返回值&#34;&gt;ref用于返回值&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;函数定义&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; val;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数返回值为&lt;code&gt;ref int&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数参数类型为&lt;code&gt;ref int&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数返回值前面必须带上&lt;code&gt;ref&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ref用作局部变量&#34;&gt;ref用作局部变量&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; myNum = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; myRefNum = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; myNum;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义引用时要&lt;code&gt;ref int&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;赋值时要在变量前添加&lt;code&gt;ref&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ref返回array&#34;&gt;ref返回array&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; ReturnByRef()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] array = {&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; array[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt;是引用类型，在没有参数声明的情况下使用&lt;code&gt;ref&lt;/code&gt;关键字可以返回&lt;code&gt;arrays&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然strings是引用类型，但是属于特例，因为它们是不可改变的，修改它们会产生新的string，原有的string则会被解除分配。如果试图通过ref返回string，C#编译器Roslyn会报错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;输出参数&#34;&gt;输出参数&lt;/h3&gt;
&lt;p&gt;除了按引用传递值外，还可以使用&lt;code&gt;out&lt;/code&gt;关键字，指定所给参数是一个&lt;strong&gt;输出参数&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;out关键字的使用方法&#34;&gt;&lt;code&gt;out&lt;/code&gt;关键字的使用方法：&lt;/h4&gt;
&lt;p&gt;在函数定义和函数调用中用作参数的修饰符（同&lt;code&gt;ref&lt;/code&gt;类似），也有不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把未赋值的用作&lt;code&gt;ref&lt;/code&gt;参数是非法的，但是可以把未赋值的变量用作&lt;code&gt;out&lt;/code&gt;参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用代码时可以使用已经赋值的变用作&lt;code&gt;out&lt;/code&gt;参数，但是存储在该变量中的值在函数执行的时候会丢失&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Collections.Generic&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Linq&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Text&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Threading.Tasks&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;static&lt;/span&gt; System.Console;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;Ch06Ex05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MaxValue(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] array, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxIndex)&lt;span style=&#34;color:#228b22&#34;&gt;//函数声明的时候带上out&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxValue = array[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            maxIndex = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;					&lt;span style=&#34;color:#228b22&#34;&gt;//初始化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; array.Length; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (array[i] &amp;gt; maxValue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    maxValue = array[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    maxIndex = i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; maxValue;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] array = { &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;The maxValue is {MaxValue(array, out int maxIndex)}.&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;//函数调用的时候也要带上out&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;The index of the maxValue(first occurrence) is {maxIndex}.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ReadLine();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用变量作用域&#34;&gt;使用变量作用域&lt;/h2&gt;
&lt;h3 id=&#34;局部变量&#34;&gt;局部变量&lt;/h3&gt;
&lt;h3 id=&#34;全局变量&#34;&gt;全局变量&lt;/h3&gt;
&lt;h4 id=&#34;声明-1&#34;&gt;声明&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; myString;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;与Main函数并列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;声明前必须有&lt;code&gt;static&lt;/code&gt;或者&lt;code&gt;const&lt;/code&gt;，后者代表变量不可修改&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;调用&#34;&gt;调用&lt;/h4&gt;
&lt;p&gt;全局变量声明后，在任何位置都可以进行调用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果全局变量和局部变量重名&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Program.myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;myString in prgram&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;不存在局部变量和全局变量重名&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;myString in program&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;其他结构中变量的作用域&#34;&gt;其他结构中变量的作用域&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    myString = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Line {Convert.String(i)}&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;$&lt;/span&gt;{myString});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;{myString}&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;//Line 9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义在&lt;code&gt;for&lt;/code&gt;循环之外的&lt;code&gt;myString&lt;/code&gt;才能够相当于一个“全局变量”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;myString&lt;/code&gt;声明后必须进行&lt;strong&gt;赋值&lt;/strong&gt;，因为赋值代表着申请一块内存空间。如果赋值在循环内发生，那么该值实际上被定义为一个局部值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;参数和返回值与全局数据&#34;&gt;参数和返回值与全局数据&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val doubled = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val = {val}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; val);       &lt;span style=&#34;color:#228b22&#34;&gt;//6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val = {val}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val douled = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val = {val}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ShowDouble();              &lt;span style=&#34;color:#228b22&#34;&gt;//6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val = {val}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val douled = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val = {val}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;out&lt;/span&gt; val);       &lt;span style=&#34;color:#228b22&#34;&gt;//6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val = {val}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上三段代码运行结果相同，但是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第二段代码使用全局变量，会对函数的灵活性有行为的限制。要存储结果，就必须总是把这个全局变量值复制到其他变量值中。全局变量还可能在应用程序中的其他地方被代码修改，这会导致预料不到的后果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第一段代码使用&lt;code&gt;ref&lt;/code&gt;，变量&lt;code&gt;val&lt;/code&gt;成为引用变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三段代码使用&lt;code&gt;out&lt;/code&gt;，&lt;code&gt;ShowDouble&lt;/code&gt;函数运行结束前最后的&lt;code&gt;val&lt;/code&gt;作为输出参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;局部函数&#34;&gt;局部函数&lt;/h3&gt;
&lt;p&gt;函数定义在Main函数之内，不能从Program类中的其他函数中调用这个函数。函数在声明时不必添加&lt;code&gt;static&lt;/code&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; myNumber = &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;Main Function = {myNumber}.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            DoubleInt(myNumber);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; DoubleInt(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;Local Function = {val}.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如何结合使用main函数和命令行参数&#34;&gt;如何结合使用&lt;code&gt;Main()&lt;/code&gt;函数和命令行参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Main()&lt;/code&gt;函数是C#程序的入口，执行这个函数就是执行应用程序。在执行过程开始时，会执行Main()函数，在Main()函数执行完毕后，执行过程就结束了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Main()函数的返回值为&lt;code&gt;void&lt;/code&gt;或者&lt;code&gt;int&lt;/code&gt;，返回值为int时用于表示应用程序的终止方式。一般来说返回值为0表示应用程序已经执行完毕并安全地终止。通常用作错误提示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Main()函数有一个可选参数&lt;code&gt;string[] args&lt;/code&gt;，提供了一种从应用程序的外部接受信息的方法，这些信息在运行应用程序时以命令行参数的形式指定&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; Main();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如何把函数提供为结构类型成员&#34;&gt;如何把函数提供为结构类型成员&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CustomerName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; firstName, lastName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; Name() =&amp;gt; firstName + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + lastName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            CustomerName myCustomerName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            myCustomerName.firstName = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            myCustomerName.lastName = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Franklin&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;myCustomer&amp;#39;s name is {myCustomerName.Name()}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了数据，结构&lt;code&gt;struct&lt;/code&gt;还可以包含函数，函数可以访问结构内的数据成员，函数在结构中可以看作全局成员&lt;/p&gt;
&lt;h2 id=&#34;如何使用函数重载&#34;&gt;如何使用函数重载&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;函数的签名：包括&lt;/strong&gt;函数名和&lt;strong&gt;参数&lt;/strong&gt;，在函数定义过程中要保证所有函数的签名不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MaxValue(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; [] intArray)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxValue = intArray[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; intArray)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt; &amp;gt; maxValue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            maxValue = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; maxValue;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; MaxValue(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; [] doubleArray)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; maxValue = doubleArray[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; doubleArray)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt; &amp;gt; maxValue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            maxValue = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;value&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; maxValue;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;doubled val = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ShowDouble(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    val *= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;doubled val = {val}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] intArray = { &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt;[] doubleArray = { &lt;span style=&#34;color:#b452cd&#34;&gt;1.1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2.2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3.3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;4.4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5.5&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; intMaxValue = MaxValue(intArray);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; doubleMaxValue = MaxValue(doubleArray);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;intMaxValue = {intMaxValue}, doubleMaxValue = {doubleMaxValue}.&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;//5,5.5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val1 = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, val2 = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ShowDouble(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ref&lt;/span&gt; val1);           &lt;span style=&#34;color:#228b22&#34;&gt;//4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val1 = {val1}.&amp;#34;&lt;/span&gt;);   &lt;span style=&#34;color:#228b22&#34;&gt;//4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ShowDouble(val2);               &lt;span style=&#34;color:#228b22&#34;&gt;//4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;val2 = {val2}.&amp;#34;&lt;/span&gt;);   &lt;span style=&#34;color:#228b22&#34;&gt;//2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上面的代码中定义了两个&lt;code&gt;MaxValue&lt;/code&gt;函数和两个&lt;code&gt;ShowDouble&lt;/code&gt;函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用哪个&lt;code&gt;MaxValue&lt;/code&gt;函数取决于传入的参数是&lt;code&gt;int&lt;/code&gt;类型的数组还是&lt;code&gt;double&lt;/code&gt;类型的数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用哪个&lt;code&gt;ShowDouble&lt;/code&gt;函数取决于传入的参数是否带有&lt;code&gt;ref&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何使用委托&#34;&gt;如何使用委托&lt;/h2&gt;
&lt;p&gt;委托是一种存储函数引用的类型，使用&lt;code&gt;delegate&lt;/code&gt;关键字，委托的声明指定了一个返回类型和一个参数列表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; ProcessDelegate (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; param1, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; param2)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;定义了委托之后就可以声明该委托的变量（与委托具有相同返回类型和参数的函数引用）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; Multiply (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; param1, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; param2) =&amp;gt; param1 * param2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; Divide (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; param1, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; param2) =&amp;gt; param1 / param2;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用委托来访问函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; [] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ProcessDelegate process1, process2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    process1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ProcessDelegate(Multiply); &lt;span style=&#34;color:#228b22&#34;&gt;// 或者process1 = Multiply&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    process2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ProcessDelegate(Divide);   &lt;span style=&#34;color:#228b22&#34;&gt;// 或者process2 = Divide&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时&lt;code&gt;process1&lt;/code&gt;和&lt;code&gt;process2&lt;/code&gt;就相当于函数&lt;code&gt;Multiply&lt;/code&gt;和&lt;code&gt;Divide&lt;/code&gt;，可以向其传入参数得到返回值&lt;/p&gt;
&lt;h2 id=&#34;总结-2&#34;&gt;总结&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;要点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;定义函数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用函数名、0个或多个参数及返回类型来定义函数。函数的名称和参数统称为函数的签名。可以定义名称相同但签名不同的多个函数——这称为函数重载。也可以在结构类型中定义函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;返回值和参数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;函数的返回类型可以是任意类型，如果函数没有返回值，其返回类型就是&lt;code&gt;void&lt;/code&gt;。参数也可以是任意类型，由一个用逗号分隔的类型和名称对组成。个数不定的特定类型的参数可以通过参数数组来指定。参数可以指定为&lt;code&gt;ref&lt;/code&gt;或&lt;code&gt;out&lt;/code&gt;，以便给调用者返回值。调用函数时，所指定的参数的类型和顺序必须匹配函数的定义，并且如果参数定义中使用了&lt;code&gt;ref&lt;/code&gt;和&lt;code&gt;out&lt;/code&gt;关键字，那么在调用函数的时候也必须包括对应的&lt;code&gt;ref&lt;/code&gt;和&lt;code&gt;out&lt;/code&gt;关键字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;变量作用域&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;变量根据定义它们的代码块来界定其使用范围。代码块包括方法和其他结构，例如循环体。可在不同的作用域中定义多个不同的同名变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;命令行参数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;在执行应用程序的时候，控制台应用程序中的Main函数可接收传送给应用程序的命令行参数。这些参数用空格隔开，较长的参数可以放在引号中传送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;委托&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;除了直接调用函数外，还可以通过委托调用它们。委托是用返回类型和参数列表定义的变量，给定的委托类型可以匹配返回类型和参数与委托定义相同的方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;面向对象的c语言&#34;&gt;面向对象的C#语言&lt;/h1&gt;
&lt;h2 id=&#34;类-字段-方法&#34;&gt;类 字段 方法&lt;/h2&gt;
&lt;h3 id=&#34;类字段方法&#34;&gt;类、字段、方法&lt;/h3&gt;
&lt;p&gt;面向对象的C#语言总是把现实中的事物抽象为类，类的最基本要素是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字段(field)&lt;/strong&gt;：变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;方法(method)&lt;/strong&gt;：函数（对象的行为）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Person&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; strign name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; SayHello()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello! My name is &amp;#34;&lt;/span&gt; + name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; GetInfo()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Name:&amp;#34;&lt;/span&gt; + name + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;,Age:&amp;#34;&lt;/span&gt; + age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;构造方法constructor&#34;&gt;构造方法constructor&lt;/h3&gt;
&lt;h4 id=&#34;构造方法&#34;&gt;构造方法&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;**构造方法：**构造方法的主要作用是完成对象的初始化工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;构造方法的方法名与类名相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造方法没有返回类型，也不能写void&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Person (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; n, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name = n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    age = a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;默认构造方法&#34;&gt;默认构造方法&lt;/h4&gt;
&lt;p&gt;如果用户没有定义任何构造方法，系统则会自动产生一个&lt;strong&gt;默认构造方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Person() {}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;对象的创建&#34;&gt;对象的创建&lt;/h4&gt;
&lt;p&gt;构造方法不能显式地直接调用，而是用new来调用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Person p = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Liming&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;对象的使用&#34;&gt;对象的使用&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(p.name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p.SayHello();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;析构方法&#34;&gt;析构方法&lt;/h3&gt;
&lt;p&gt;由于C#自动进行对象的释放，所以要用户一般不定义析构方法&lt;/p&gt;
&lt;h3 id=&#34;使用this&#34;&gt;使用this&lt;/h3&gt;
&lt;p&gt;this指的是这个对象本身，常用于&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;访问这个对象的字段以及方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;区分字段与局部变量&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Person(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.name = name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.age = age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;用于构造方法调用另一个构造方法？？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Person() :&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//构造方法的其他语句&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;属性-索引&#34;&gt;属性 索引&lt;/h2&gt;
- https://geoyxd.github.io/posts/c#_%E6%95%99%E7%A8%8B/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>利用gamit/globk软件计算卫星轨道</title>
        <link>https://geoyxd.github.io/posts/orbit/</link>
        <pubDate>Tue, 12 Jul 2022 15:10:25 +0800</pubDate>
        
        <guid>https://geoyxd.github.io/posts/orbit/</guid>
        <description>GNSS Site https://geoyxd.github.io/posts/orbit/ -&lt;h1 id=&#34;利用gamitglobk软件计算卫星轨道&#34;&gt;利用gamit/globk软件计算卫星轨道&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;根据卫星的受力受力情况和卫星的运动状态可以建立卫星的运动方程。
实际确定卫星的轨道时通过数值积分得到卫星轨道的数值解。
数值积分需要卫星的初始状态（位置、速度）。初始状态一般通过一系列的观测值约束，经过数据处理，来精化卫星的初始状态值，最终得到高精度的卫星初始运动状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;一gamit软件参数设置&#34;&gt;一、gamit软件参数设置&lt;/h1&gt;
&lt;p&gt;与解算地面测站的坐标的方法相比，在解算参数设置上有些区别。&lt;/p&gt;
&lt;p&gt;卫星约束为松约束，基准站约束为紧约束。&lt;/p&gt;
&lt;p&gt;sestbl.主要得参数设置为：
Choice of Experiment = RELAX.   | ORBIT
Update T/L files = T_AND_L&lt;/p&gt;
&lt;h1 id=&#34;二文件准备&#34;&gt;二、文件准备&lt;/h1&gt;
&lt;p&gt;test
305
rinex
jfs3050.17o
chan3050.17o
daej3050.17o
shao3050.17o
suwn3050.17o
brdc
brdc3050.17o
igs
igs19733.sp3
table
&amp;hellip;&amp;hellip;
table文件用sh_setup&lt;/p&gt;
&lt;p&gt;sh_setup -yr 2017 305&lt;/p&gt;
&lt;h1 id=&#34;三数据处理步骤&#34;&gt;三、数据处理步骤&lt;/h1&gt;
&lt;p&gt;1、将rinex、igs、brdc、table中的文件链接到305文件夹，在305下运行sh_makexp,生成session.info等文件&lt;/p&gt;
&lt;p&gt;sh_makexp -expt test -orbt igsf -yr 2017 -doy 305  -sess 0 -nav brdc3050.17n -jclock sp3 -apr lfile. -sinfo 30 00 00 2880&lt;/p&gt;
&lt;p&gt;2、生成轨道初值G文件&lt;/p&gt;
&lt;p&gt;sh_sp3fit -f igs19733.sp3&lt;/p&gt;
&lt;p&gt;3、检查G文件&lt;/p&gt;
&lt;p&gt;sh_check_sess -sess 305 -type gfile -file &amp;lt;g-file&amp;gt;&lt;/p&gt;
&lt;p&gt;4、生成卫星钟文件&lt;/p&gt;
&lt;p&gt;makej brdc3050.17n    jigsf7.305 igs19733.sp3&lt;/p&gt;
&lt;p&gt;5、检查j文件&lt;/p&gt;
&lt;p&gt;sh_check_sess -sess 305 -type jfile  -file   jigsf7.305&lt;/p&gt;
&lt;p&gt;6、生成双差X文件
makex test.makex.batch&lt;/p&gt;
&lt;p&gt;7、生成批处理脚本&lt;/p&gt;
&lt;p&gt;fixdrv dtest7.305&lt;/p&gt;
&lt;p&gt;8、运行脚本&lt;/p&gt;
&lt;p&gt;csh bbdst7.bat&lt;/p&gt;
&lt;h1 id=&#34;四结果分析&#34;&gt;四、结果分析&lt;/h1&gt;
&lt;p&gt;定轨结果在生成T文件（在sestbl.设置更新T文件）&lt;/p&gt;
&lt;p&gt;1、运行orbdif比较更新前后的结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ orbdif
ORBDIF: Interactive input
Runsting: &amp;lt;Type&amp;gt; &amp;lt;Frame&amp;gt; &amp;lt;T_file1&amp;gt; &amp;lt;T_File2&amp;gt; &amp;lt;RMS File&amp;gt; &amp;lt;Plot&amp;gt; &amp;lt;Plot Ext&amp;gt;
Differences are T_File2-T_file1
Enter orbit file type T-Tile (T) or NGS (N)
t
Are T-Files Inertial (I) or Earth Fixed (E)
i
Enter name of T-File (A)
tchkg7.305
Enter name of T-File (B)
tigsg7.305
Enter RMS output file name
chkrms
Interpolating Orbit files
interval          20
interval          40
interval          60
interval          80
interval          86
Enter the following options
0  to return to skip plot file making
1  to make a set of plot files of dx,dy,dz
2  to make a set of plot files of dr,da,dc
3  to make a set of plot files of vx,vy,vz
4  dN,dE,dU, and satellite ground track positions
0
Normal end of ORBDIF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2、运行ttongs生成sp3格式的文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ttongs tchkg7.305  sp3 chk fit itr97 fes2004 IGS05_1402 chk19733.sp3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3、结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Positional Errors (RMS in meters) between Two Orbits:
tchkg7.305 ( int:15.00min) vs. tigsg7.305 ( int:15.00min)
Overlapped Time Range: 2017 305  1.25 2017 305 22.75 total: 21.50 hours
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prn-----total----delta-x---delta-y---delta-z---d-radial--d-along---d-cross------d-3d&#34;&gt;PRN     Total    delta-X   delta-Y   delta-Z   d-Radial  d-Along   d-Cross      d-3D&lt;/h2&gt;
&lt;h2 id=&#34;32----049996---051999---039216---057072---019598---084314---002366---086596&#34;&gt;1    0.26833   0.22330   0.33408   0.23351   0.09138   0.44740   0.08667   0.46476
2    0.21675   0.16998   0.27468   0.19132   0.08135   0.35694   0.08391   0.37543
3    0.28971   0.29570   0.27416   0.29866   0.10193   0.48602   0.07177   0.50180
4    0.93950   0.86116   0.76425   1.14990   0.49235   1.54747   0.04167   1.62726
5    0.59195   0.57633   0.54704   0.64792   0.38383   0.93943   0.14170   1.02528
6    0.41700   0.31898   0.50135   0.41058   0.15785   0.70262   0.05585   0.72227
7    0.82410   0.71466   0.81233   0.93102   0.50744   1.33214   0.09224   1.42738
8    0.37994   0.36755   0.38190   0.39003   0.12245   0.64660   0.01045   0.65808
9    0.29147   0.34692   0.27624   0.24127   0.08947   0.49622   0.02548   0.50485
10    0.22559   0.26078   0.22239   0.18763   0.12974   0.36530   0.05082   0.39073
11    0.49684   0.48898   0.59526   0.38355   0.26510   0.80894   0.13238   0.86055
12    0.71143   0.53429   0.68619   0.87298   0.38467   1.16885   0.08957   1.23224
13    0.36188   0.32337   0.38349   0.37583   0.12656   0.61346   0.02330   0.62680
14    0.50357   0.42987   0.45804   0.60511   0.18832   0.85057   0.02303   0.87221
15    0.94055   1.06915   0.92855   0.80537   0.47177   1.55645   0.03686   1.62909
16    0.34995   0.33714   0.35206   0.36027   0.16965   0.57705   0.07085   0.60614
17    0.46648   0.37784   0.42828   0.57150   0.27333   0.75928   0.04878   0.80796
18    0.29637   0.39630   0.26311   0.19293   0.14446   0.49272   0.02941   0.51332
19    0.44295   0.45312   0.35322   0.50846   0.16394   0.74756   0.04797   0.76722
20    0.50611   0.69423   0.28488   0.45313   0.32562   0.81183   0.04237   0.87661
21    0.45456   0.40781   0.41315   0.53186   0.20097   0.76092   0.06087   0.78732
22    0.52029   0.44322   0.49707   0.60712   0.23124   0.86926   0.04187   0.90117
23    0.64727   0.79259   0.59411   0.52509   0.32764   1.06979   0.02337   1.12111
24    0.14687   0.12066   0.18791   0.12181   0.12733   0.21417   0.05068   0.25438
25    0.08415   0.09965   0.08681   0.06146   0.05533   0.12211   0.05690   0.14575
26    0.41093   0.41984   0.41284   0.39986   0.15882   0.69249   0.04423   0.71175
27    0.45998   0.40876   0.41376   0.54447   0.16342   0.77976   0.01363   0.79670
28    0.11271   0.12033   0.11580   0.10110   0.05093   0.17541   0.06817   0.19522
29    0.98331   1.22239   0.82247   0.85440   0.50230   1.62699   0.03932   1.70314
30    0.39993   0.36931   0.41103   0.41771   0.14332   0.67607   0.04630   0.69270
31    0.54272   0.47710   0.53662   0.60666   0.36499   0.86162   0.07567   0.94001
32    0.49996   0.51999   0.39216   0.57072   0.19598   0.84314   0.02366   0.86596&lt;/h2&gt;
&lt;h2 id=&#34;mean---051421---052248---048124---053726---026258---084845---006260---089063&#34;&gt;MEAN   0.51421   0.52248   0.48124   0.53726   0.26258   0.84845   0.06260   0.89063&lt;/h2&gt;
&lt;h2 id=&#34;定轨精度分米级主要原因测站数目测站分布&#34;&gt;*定轨精度分米级，主要原因测站数目、测站分布&lt;/h2&gt;
&lt;p&gt;问题解决
一、makexp生成session.info文件无卫星信息&lt;/p&gt;
&lt;p&gt;sh_makexp&lt;/p&gt;
&lt;p&gt;sh_makexp -expt test -orbt igsf -yr 2017 -doy 305  -sess 0 -nav brdc3050.17n -jclock sp3 -apr lfile. -sinfo 30 00 00 2880&lt;/p&gt;
&lt;p&gt;二、Neither T- nor G-file available (Name tigsf7.305)&lt;/p&gt;
&lt;p&gt;方法一、修改dtest7.305文件中tigsf7.305为gigsf7.305&lt;/p&gt;
&lt;p&gt;方法二、生成tigsf7.305
通过arc, bctot, ngstot, sh_bctot, sh_sp3fit等生成
例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ngstot igs19733.sp3 tigsg7.305&lt;/p&gt;
&lt;/blockquote&gt;
- https://geoyxd.github.io/posts/orbit/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>利用gamit/globk软件计算卫星轨道</title>
        <link>https://geoyxd.github.io/posts/%E6%96%B0%E5%BB%BA-markdown/</link>
        <pubDate>Tue, 12 Jul 2022 15:10:25 +0800</pubDate>
        
        <guid>https://geoyxd.github.io/posts/%E6%96%B0%E5%BB%BA-markdown/</guid>
        <description>GNSS Site https://geoyxd.github.io/posts/%E6%96%B0%E5%BB%BA-markdown/ -&lt;h1 id=&#34;利用gamitglobk软件计算卫星轨道&#34;&gt;利用gamit/globk软件计算卫星轨道&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;根据卫星的受力受力情况和卫星的运动状态可以建立卫星的运动方程。
实际确定卫星的轨道时通过数值积分得到卫星轨道的数值解。
数值积分需要卫星的初始状态（位置、速度）。初始状态一般通过一系列的观测值约束，经过数据处理，来精化卫星的初始状态值，最终得到高精度的卫星初始运动状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;一gamit软件参数设置&#34;&gt;一、gamit软件参数设置&lt;/h1&gt;
&lt;p&gt;与解算地面测站的坐标的方法相比，在解算参数设置上有些区别。&lt;/p&gt;
&lt;p&gt;卫星约束为松约束，基准站约束为紧约束。&lt;/p&gt;
&lt;p&gt;sestbl.主要得参数设置为：
Choice of Experiment = RELAX.   | ORBIT
Update T/L files = T_AND_L&lt;/p&gt;
&lt;h1 id=&#34;二文件准备&#34;&gt;二、文件准备&lt;/h1&gt;
&lt;p&gt;test
305
rinex
jfs3050.17o
chan3050.17o
daej3050.17o
shao3050.17o
suwn3050.17o
brdc
brdc3050.17o
igs
igs19733.sp3
table
&amp;hellip;&amp;hellip;
table文件用sh_setup&lt;/p&gt;
&lt;p&gt;sh_setup -yr 2017 305&lt;/p&gt;
&lt;h1 id=&#34;三数据处理步骤&#34;&gt;三、数据处理步骤&lt;/h1&gt;
&lt;p&gt;1、将rinex、igs、brdc、table中的文件链接到305文件夹，在305下运行sh_makexp,生成session.info等文件&lt;/p&gt;
&lt;p&gt;sh_makexp -expt test -orbt igsf -yr 2017 -doy 305  -sess 0 -nav brdc3050.17n -jclock sp3 -apr lfile. -sinfo 30 00 00 2880&lt;/p&gt;
&lt;p&gt;2、生成轨道初值G文件&lt;/p&gt;
&lt;p&gt;sh_sp3fit -f igs19733.sp3&lt;/p&gt;
&lt;p&gt;3、检查G文件&lt;/p&gt;
&lt;p&gt;sh_check_sess -sess 305 -type gfile -file &amp;lt;g-file&amp;gt;&lt;/p&gt;
&lt;p&gt;4、生成卫星钟文件&lt;/p&gt;
&lt;p&gt;makej brdc3050.17n    jigsf7.305 igs19733.sp3&lt;/p&gt;
&lt;p&gt;5、检查j文件&lt;/p&gt;
&lt;p&gt;sh_check_sess -sess 305 -type jfile  -file   jigsf7.305&lt;/p&gt;
&lt;p&gt;6、生成双差X文件
makex test.makex.batch&lt;/p&gt;
&lt;p&gt;7、生成批处理脚本&lt;/p&gt;
&lt;p&gt;fixdrv dtest7.305&lt;/p&gt;
&lt;p&gt;8、运行脚本&lt;/p&gt;
&lt;p&gt;csh bbdst7.bat&lt;/p&gt;
&lt;h1 id=&#34;四结果分析&#34;&gt;四、结果分析&lt;/h1&gt;
&lt;p&gt;定轨结果在生成T文件（在sestbl.设置更新T文件）&lt;/p&gt;
&lt;p&gt;1、运行orbdif比较更新前后的结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ orbdif
ORBDIF: Interactive input
Runsting: &amp;lt;Type&amp;gt; &amp;lt;Frame&amp;gt; &amp;lt;T_file1&amp;gt; &amp;lt;T_File2&amp;gt; &amp;lt;RMS File&amp;gt; &amp;lt;Plot&amp;gt; &amp;lt;Plot Ext&amp;gt;
Differences are T_File2-T_file1
Enter orbit file type T-Tile (T) or NGS (N)
t
Are T-Files Inertial (I) or Earth Fixed (E)
i
Enter name of T-File (A)
tchkg7.305
Enter name of T-File (B)
tigsg7.305
Enter RMS output file name
chkrms
Interpolating Orbit files
interval          20
interval          40
interval          60
interval          80
interval          86
Enter the following options
0  to return to skip plot file making
1  to make a set of plot files of dx,dy,dz
2  to make a set of plot files of dr,da,dc
3  to make a set of plot files of vx,vy,vz
4  dN,dE,dU, and satellite ground track positions
0
Normal end of ORBDIF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2、运行ttongs生成sp3格式的文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ttongs tchkg7.305  sp3 chk fit itr97 fes2004 IGS05_1402 chk19733.sp3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3、结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Positional Errors (RMS in meters) between Two Orbits:
tchkg7.305 ( int:15.00min) vs. tigsg7.305 ( int:15.00min)
Overlapped Time Range: 2017 305  1.25 2017 305 22.75 total: 21.50 hours
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prn-----total----delta-x---delta-y---delta-z---d-radial--d-along---d-cross------d-3d&#34;&gt;PRN     Total    delta-X   delta-Y   delta-Z   d-Radial  d-Along   d-Cross      d-3D&lt;/h2&gt;
&lt;h2 id=&#34;32----049996---051999---039216---057072---019598---084314---002366---086596&#34;&gt;1    0.26833   0.22330   0.33408   0.23351   0.09138   0.44740   0.08667   0.46476
2    0.21675   0.16998   0.27468   0.19132   0.08135   0.35694   0.08391   0.37543
3    0.28971   0.29570   0.27416   0.29866   0.10193   0.48602   0.07177   0.50180
4    0.93950   0.86116   0.76425   1.14990   0.49235   1.54747   0.04167   1.62726
5    0.59195   0.57633   0.54704   0.64792   0.38383   0.93943   0.14170   1.02528
6    0.41700   0.31898   0.50135   0.41058   0.15785   0.70262   0.05585   0.72227
7    0.82410   0.71466   0.81233   0.93102   0.50744   1.33214   0.09224   1.42738
8    0.37994   0.36755   0.38190   0.39003   0.12245   0.64660   0.01045   0.65808
9    0.29147   0.34692   0.27624   0.24127   0.08947   0.49622   0.02548   0.50485
10    0.22559   0.26078   0.22239   0.18763   0.12974   0.36530   0.05082   0.39073
11    0.49684   0.48898   0.59526   0.38355   0.26510   0.80894   0.13238   0.86055
12    0.71143   0.53429   0.68619   0.87298   0.38467   1.16885   0.08957   1.23224
13    0.36188   0.32337   0.38349   0.37583   0.12656   0.61346   0.02330   0.62680
14    0.50357   0.42987   0.45804   0.60511   0.18832   0.85057   0.02303   0.87221
15    0.94055   1.06915   0.92855   0.80537   0.47177   1.55645   0.03686   1.62909
16    0.34995   0.33714   0.35206   0.36027   0.16965   0.57705   0.07085   0.60614
17    0.46648   0.37784   0.42828   0.57150   0.27333   0.75928   0.04878   0.80796
18    0.29637   0.39630   0.26311   0.19293   0.14446   0.49272   0.02941   0.51332
19    0.44295   0.45312   0.35322   0.50846   0.16394   0.74756   0.04797   0.76722
20    0.50611   0.69423   0.28488   0.45313   0.32562   0.81183   0.04237   0.87661
21    0.45456   0.40781   0.41315   0.53186   0.20097   0.76092   0.06087   0.78732
22    0.52029   0.44322   0.49707   0.60712   0.23124   0.86926   0.04187   0.90117
23    0.64727   0.79259   0.59411   0.52509   0.32764   1.06979   0.02337   1.12111
24    0.14687   0.12066   0.18791   0.12181   0.12733   0.21417   0.05068   0.25438
25    0.08415   0.09965   0.08681   0.06146   0.05533   0.12211   0.05690   0.14575
26    0.41093   0.41984   0.41284   0.39986   0.15882   0.69249   0.04423   0.71175
27    0.45998   0.40876   0.41376   0.54447   0.16342   0.77976   0.01363   0.79670
28    0.11271   0.12033   0.11580   0.10110   0.05093   0.17541   0.06817   0.19522
29    0.98331   1.22239   0.82247   0.85440   0.50230   1.62699   0.03932   1.70314
30    0.39993   0.36931   0.41103   0.41771   0.14332   0.67607   0.04630   0.69270
31    0.54272   0.47710   0.53662   0.60666   0.36499   0.86162   0.07567   0.94001
32    0.49996   0.51999   0.39216   0.57072   0.19598   0.84314   0.02366   0.86596&lt;/h2&gt;
&lt;h2 id=&#34;mean---051421---052248---048124---053726---026258---084845---006260---089063&#34;&gt;MEAN   0.51421   0.52248   0.48124   0.53726   0.26258   0.84845   0.06260   0.89063&lt;/h2&gt;
&lt;h2 id=&#34;定轨精度分米级主要原因测站数目测站分布&#34;&gt;*定轨精度分米级，主要原因测站数目、测站分布&lt;/h2&gt;
&lt;p&gt;问题解决
一、makexp生成session.info文件无卫星信息&lt;/p&gt;
&lt;p&gt;sh_makexp&lt;/p&gt;
&lt;p&gt;sh_makexp -expt test -orbt igsf -yr 2017 -doy 305  -sess 0 -nav brdc3050.17n -jclock sp3 -apr lfile. -sinfo 30 00 00 2880&lt;/p&gt;
&lt;p&gt;二、Neither T- nor G-file available (Name tigsf7.305)&lt;/p&gt;
&lt;p&gt;方法一、修改dtest7.305文件中tigsf7.305为gigsf7.305&lt;/p&gt;
&lt;p&gt;方法二、生成tigsf7.305
通过arc, bctot, ngstot, sh_bctot, sh_sp3fit等生成
例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ngstot igs19733.sp3 tigsg7.305&lt;/p&gt;
&lt;/blockquote&gt;
- https://geoyxd.github.io/posts/%E6%96%B0%E5%BB%BA-markdown/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>Ubuntu23 安装 gamit 软件</title>
        <link>https://geoyxd.github.io/posts/install_gamit_software/</link>
        <pubDate>Sun, 12 Jun 2022 15:10:25 +0800</pubDate>
        
        <guid>https://geoyxd.github.io/posts/install_gamit_software/</guid>
        <description>GNSS Site https://geoyxd.github.io/posts/install_gamit_software/ -&lt;h1 id=&#34;gamitglobk-软件简介&#34;&gt;GAMIT/GLOBK 软件简介&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;GAMIT/GLOBK 是由麻省理工学院(MIT)、美国加利福尼亚斯克瑞布(SCRIPPS)海洋研究所(SIO)等研制的用于 GNSS 数据处理与分析的软件，经不断改进而成为著名的高精度 GNSS 数据分析和处理软件之一，GAMIT/GLOBK 高精度数据处理软件不但精度高且开放源代码， 可以根据需要进行二次开发。GAMIT 集 GNSS 定位定轨于一体，可以解算卫星轨道和测站坐标以及其它一些辅助参数（如钟差、大气延迟改正参数、整周模糊度参数等）。GLOBK 是利用卡尔曼滤波方法，可对多天和多期观测数据进行平差分析，求出观测点的精确坐标和在不同期观测中各测点的变化速率等，其输入的原始数据为 H 文件或 SINEX 文件。GAMIT/GLOBK 运行于所有 UNIX 及其衍生的操作系统中，目前最新的版本是 GAMIT/GLOBK10.7，其支持 GPS、北斗等导航卫星系统的数据处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;安装-gamitglobk-软件&#34;&gt;安装 GAMIT/GLOBK 软件&lt;/h1&gt;
&lt;h2 id=&#34;安装支持-gamit-软件包支持的软件&#34;&gt;安装支持 GAMIT 软件包支持的软件。&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install tcsh
sudo apt install csh
sudo apt install gcc
sudo apt install libx11-dev
sudo apt install gfortran
sudo apt install make
sudo apt install gmt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;下载低版本的-gcc-gfortran-软件&#34;&gt;下载低版本的 gcc gfortran 软件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install gcc-9&lt;br&gt;
sudo apt-get install gfortran-9&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;查询安装gcc版本&#34;&gt;查询安装gcc版本&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ls /usr/bin/gcc*
##设置编译器默认使用的版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;#调整gcc-11的优先级为40，gcc-9的优先级为100
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 40
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;#调整gfortran-11的优先级为40，gfortran-9的优先级为100
sudo update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-11 40
sudo update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-9 100
sudo update-alternatives --config gcc
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;查询当前的gcc版本&#34;&gt;查询当前的gcc版本&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;gcc -v&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;安装-gamit-软件&#34;&gt;安装 gamit 软件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在 linux 终端下运行以下命令：将 gamit 软件包复制 linux 系统的 opt 目录下：执行下面的命令为 gamit/ 文件夹下的文件分配可执行权限：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo chmod 755 -R gamit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过 cd 命令进入到 gamit 目录中，运行 install_software 脚本安装软件。具体命令如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd gamnit
./install_software
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之后的一切询问输入 y，安装成功之后会看到提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;++++++++++++++++ GLOBK installed ++++++++++++++++
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;为了在任何目录都能运行 GAMIT/GLOBK，需要将程序目录加入到系统的 PATH 变量中。环境变量配置方式依所使用的 Shell 有所不同。在终端内执行如下可以查看当前使用的 Shell：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;echo $SHELL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于 Bash 用户，打开主目录的 ~/.bashrc，在其中添加以下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gg=&amp;quot;/opt/gamit&amp;quot;
export PATH=&amp;quot;$gg/gamit/bin:$gg/kf/bin:$gg/com:$PATH&amp;quot;
export HELP_DIR=$gg/help/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于 C Shell 或 TC Shell 用户，打开主目录的 ~/.cshrc 文件，在底部添加以下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set gg = /opt/gamit
setenv PATH &amp;quot;$gg/gamit/bin:$gg/kf/bin:$gg/com:$PATH&amp;quot;
setenv HELP_DIR $gg/help/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存，退出。再执行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source ~/.bashrc
source ~/.cshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;测试-gamit-安装是否成功&#34;&gt;测试 gamit 安装是否成功&lt;/h2&gt;
&lt;p&gt;运行一下命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;doy
sh_gamit
&lt;/code&gt;&lt;/pre&gt;
- https://geoyxd.github.io/posts/install_gamit_software/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>linux mint 安装 bernese 软件</title>
        <link>https://geoyxd.github.io/posts/install_bernese_software/</link>
        <pubDate>Tue, 12 Jun 2018 15:10:25 +0800</pubDate>
        
        <guid>https://geoyxd.github.io/posts/install_bernese_software/</guid>
        <description>GNSS Site https://geoyxd.github.io/posts/install_bernese_software/ -&lt;h1 id=&#34;gamitglobk-软件简介&#34;&gt;GAMIT/GLOBK 软件简介&lt;/h1&gt;
&lt;h1 id=&#34;linux系统编译bernese软件&#34;&gt;linux系统编译bernese软件&lt;/h1&gt;
&lt;p&gt;安装bernese5.2遇到两个坑
一、Qt的安装
二、bernese的按装&lt;/p&gt;
&lt;h2 id=&#34;1编译平台&#34;&gt;1编译平台&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1 Ubuntu18.04&lt;/li&gt;
&lt;li&gt;2 bernese5.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2依赖库&#34;&gt;2依赖库&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ C 
$ sudo apt install libxext-dev 
$ sudo apt install libxtst-dev 
$ sudo apt install zlib1g-dev
sudo apt install g++
sudo apt install gfortran
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装-软件&#34;&gt;安装 软件&lt;/h2&gt;
&lt;h3 id=&#34;1-qt&#34;&gt;1 qt&lt;/h3&gt;
&lt;h4 id=&#34;下载httpdownloadqtioarchiveqt&#34;&gt;&lt;a href=&#34;http://download.qt.io/archive/qt/&#34;&gt;下载&lt;/a&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ tar -zxvf qt-everywhere-opensource-src-4.8.7.tar.gz
$ cd qt-everywhere-opensource-src-4.8.7
$ sudo ./configure -release -opensource -static -prefix /usr/local/qt4
$ sudo make                                                            
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;qt编译失败编译器参数设置不对应该加上-stdgnu98参数&#34;&gt;QT编译失败，编译器参数设置不对，应该加上：-std=gnu++98 参数&lt;/h4&gt;
&lt;p&gt;在终端执行./configure 后，在终端文本中搜索mkspecs或者Build type:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;en-resource://database/568:1&#34; alt=&#34;406f0c73372bd6b85a474626185200be.png&#34;&gt;
文件夹中mkspecs打开在Build type后面的linux-g++文件夹/qmake.conf
修改其中的QMAKE_CXXFLAGS为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QMAKE_CXXFLAGS = $$QMAKE_CFLAGS -std=gnu++98
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果该文件中不存在QMAKE_CXXFLAGS 参数，则在该文件包含的头文件中查找。
例如：该文件不存在QMAKE_CXXFLAGS 参数，则打开 ../common/linux.conf、../common/gcc-base-unix.conf、../common/g++-unix.conf 这三个文件。如果没有找到还需要递归的打开着三个文件中包含的文件。在../common/gcc-base.conf （包含在文件../common/gcc-base-unix.conf 中）文件中找到，并修改为如下所示。
&lt;strong&gt;&lt;strong&gt;本文在gcc-base.conf和g++-base.conf 中对参数修改为如下所示。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QMAKE_CXXFLAGS         += $$QMAKE_CFLAGS  -std=gnu++98  #gcc-base.conf文件
QMAKE_CXX = g++ -std=gnu++98   # g++-base.conf 文件
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后再执行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo make confclean 
$ sudo ./configure -release -opensource -static -prefix /usr/local/qt4
$ sudo make 
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Qt 4 的编译安装过程需要耗费较长的时间，具体时长取决于你的计算机硬件配置，耐心等待其编译完成。然后设置环境变量 QTDIR，将其指向 Qt 4 的安装目录。切换至 root ，打开 bash 环境配置文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ su root 
# gedit ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在bashrc文件中添加&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# PATH for QT4.8 
export QTDIR=/usr/local/qt4 
export PARH=PATH:QTDIR/bin 
export MANPATH=$QTDIR/doc/man 
export LD_LIBRARY_PATH=$QTDIR/lib
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装错误&#34;&gt;安装错误&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gmake[1]: *** [Makefile:128864: .obj/release-shared/qprintdialog_unix.o] Error 1
gmake[1]: Leaving directory &amp;#39;/home/casm/Desktop/qt-everywhere-opensource-src-4.8.7/src/gui&amp;#39;
gmake: *** [Makefile:385: sub-gui-make_default-ordered] Error 2
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;bernese52&#34;&gt;bernese5.2&lt;/h2&gt;
&lt;p&gt;通过 root 用户执行 Bernese 的安装引导脚本：&lt;/p&gt;
&lt;p&gt;首先给root用户设置密码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo passwd root
输入密码，并确认密码
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后进入root，运行setup.sh&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ su root
# sh setup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后程序提示输入 Bernese 软件的安装目录，
&lt;strong&gt;&lt;strong&gt;这里的 /root 表示默认安装路径。&lt;/strong&gt;&lt;/strong&gt; !这里有坑，显示/root为正常
我们将其安装到 /opt/BERN52 文件夹，因此输入：/opt。
一路回车，之后，配置文件 configure.pm 被启动，并在屏幕打印以下提示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;==========================================
CONFIGURATION OF THE BERNESE GNSS SOFTWARE
==========================================
0 ... Complete installation (Steps 1 to 5)
1 ... Update LOADGPS.setvar
2 ... Install online updates (only after Step 1)
3 ... Add a new user environment (only after Step 1)
4 ... Compile the menu (only after Step 1)
5 ... Compile the programs (only after Step 1)
6 ... Install the example campaign (only after Step 1)
7 ...   ---

x ... Exit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解释一下此处的各个选项：
键入 0：执行从第 1 项至第 5 项的全部过程键入 
1：更新环境变量设置键入 
2：安装在线更新包键入 
3：添加新用户环境键入 
4：编译图形界面菜单键入 
5：编辑程序键入 
6：安装解算工程示例键入 
x： 退出安装程序
由于存在一些坑，我们老老实实一步一步进行。键入 1，安装程序打印出支持的编译器，其中 GNU 指示到 gfortran 的路径，表明安装程序找到的了该编译器：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Enter option: 1

Information about compiler tests for OS LINUX:
 1: g95 tested at AIUB
 2: gfortran tested at AIUB
 3: ifort tested at AIUB (version 10 and 12)
 4: pgf90 tested at AIUB
 5: f90 tested at AIUB
 6: Use &amp;#34;OTHER&amp;#34; compiler from /opt/BERN52/GPS/EXE/Makefile.template

Select Compiler for OS LINUX:
 1: G95
 2: GNU -&amp;gt; /usr/bin/gfortran
 3: IFC
 4: PG_F90
 5: SUNF90
 6: OTHER

Select  [2]: 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里系统已经检测到了 gfortran，键入 2 选择 gfortran 编译器（也可以直接按 Enter 键回车，因为默认就是 2）。然后安装程序继续打印出当前应用的环境变量：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Current Values:
--------------
    VARIABLE DESCRIPTION           VARIABLE NAME      VARIABLE VALUE
 1: Path to software               C               =&amp;gt; /opt/BERN52
 2: Path to Qt libraries           QTBERN          =&amp;gt; /usr/local/qt4
 3: Operating system group         OS              =&amp;gt; UNIX
 4: Operating system name          OS_NAME         =&amp;gt; LINUX
 5: Fortran compiler name          F_VERS          =&amp;gt; GNU
 6: List of additional compilers   F_VERS_LIST     =&amp;gt; 
 7: Host of the BPE server         BPE_SERVER_HOST =&amp;gt; U1604
 8: Path to user environment       U               =&amp;gt; ${HOME}/GPSUSER52
 9: Path to temp. user environment T               =&amp;gt; ${HOME}/GPSTEMP
10: Path to campaign area          P               =&amp;gt; ${HOME}/GPSDATA/CAMPAIGN52
11: Path to datapool area          D               =&amp;gt; ${HOME}/GPSDATA/DATAPOOL
12: Path to savedisk area          S               =&amp;gt; ${HOME}/GPSDATA/SAVEDISK
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解释一下此处的默认环境变量：&lt;/p&gt;
&lt;p&gt;第 1 项：Bernese 软件的安装目录
第 2 项：所使用的 Qt 4 所在目录
第 3 项：操作系统类型
第 4 项：操作系统名称
第 5 项：使用的 Fortran 编译器
第 6 项：其他可用的编译器
第 7 项： BPE 服务器
第 8 项：用户环境目录
第 9 项：用户临时文件缓存目录
第 10 项：用户解算工程文件夹
第 11 项：用户数据文件夹目录
第 12 项：解算成果目录&lt;/p&gt;
&lt;p&gt;若接受其默认的变量设置，输入 y。要修改其中的配置，输入 n，然后根据其提示，输入变量编号来配置变量。这里使用默认设置，输入 y。随后安装程序将检测是否存在所需的文件夹，当提示某个文件夹不存在时，程序提示是否创建，键入 y 创建即可。
&lt;strong&gt;&lt;strong&gt;坑1&lt;/strong&gt;&lt;/strong&gt; 进行到第三步时重新打开终端&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /opt/BERN52
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ld -v
GNU ld (GNU Binutils for Ubuntu) 2.30
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;版本大于 2.22，需要修改 BERN52/MENU/memu.pro 中的内容。
打开该文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo gedit /opt/BERN52/MENU/menu.pro
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;去掉前面的##&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##QMAKE_LIBS += -lz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;保存后退出。然后，回到原终端，按 3 添加新用户环境。
&lt;strong&gt;&lt;strong&gt;坑2&lt;/strong&gt;&lt;/strong&gt; 进行到第五步&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;若提示 Fortran 程序编译至 100/100 时出错，返回安装程序引导
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;是安装文件没有权限&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /opt
sudo chmod 755 -R BERN52
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;继续安装，直至提示安装成功。&lt;/p&gt;
&lt;h3 id=&#34;添加普通用户&#34;&gt;添加普通用户&lt;/h3&gt;
&lt;p&gt;使用 root 用户进行数据解算操作既不方便也不安全。为了让非 root 用户也能使用 Bernese，需要使用新用户加载环境变量设置文件，并启动配置程序。按 3 继续，若不慎将终端关闭，新开终端中执行如下命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ source /opt/BERN52/GPS/EXE/LOADGPS.setvar
$ perl /opt/BERN52/GPS/EXE/configure.pm
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;程序再次打印出安装提示，此时键入 3，根据程序提示添加新用户的环境变量即可。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;==========================================
CONFIGURATION OF THE BERNESE GNSS SOFTWARE
==========================================
 1 ... Update LOADGPS.setvar
 2 ... Install online updates
 3 ... Add a new user environment
 4 ... Compile the menu
 5 ... Compile the programs
 6 ... Install the example campaign
 7 ...   ---

 x ... Exit

Enter option: 3

Create user environment /home/xxx/GPSUSER52 (y/n): y

Copying menu and program input files...
Copying BPE user scripts...
Copying examples for process control files...
Copying BPE options for processing examples...
Copying ICONS ...
Extracting ICONS ...


**********************************************************************
* User area /home/spacefan/GPSUSER52
* has been added/updated.
**********************************************************************

注意：此步是在普通用户模式下进行的操作，而非 root 用户。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Installation of the Example campaign has been finished&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ATTENTION:
When you are going to run them, please make sure that your
user scripts are still not modified.
 ### Executable CRX2RNX is missing!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;配置环境变量&#34;&gt;配置环境变量&lt;/h3&gt;
&lt;p&gt;为了在每次开机后都能直接使用 Bernese 软件，需要配置在系统启动时自动加载环境变量。编辑用户主文件夹内的配置文件（root 下的配置文件也可以一并添加了）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gedit ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在文件末尾为 Bernese 加载环境变量：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Load environment variables for Bernese GNSS Software
source /opt/BERN52/GPS/EXE/LOADGPS.setvar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从 /root 目录将 GPSDATA 拷贝到普通用户目录 /home/spacefan，再为其添加普通用户权限即可。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo chown -R  geoyxd /home/geoyxd/GPSDATA
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;卸载qt4&#34;&gt;卸载qt4&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get autoremove --purge libqt4-[a-z]*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4 结束语&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;http://blog.sciencenet.cn/home.php?mod=space&amp;amp;uid=1094854&amp;amp;do=blog&amp;amp;quickforward=1&amp;amp;id=863531&#34;&gt;BERNESE5.2 linux 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;https://blog.csdn.net/spacefan/article/details/94559873&#34;&gt;Bernese 5.2 + Ubuntu 16.04 编译安装完全指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;http://blog.sciencenet.cn/home.phpmod=space&amp;amp;uid=3379275&amp;amp;do=blog&amp;amp;quickforward=1&amp;amp;id=1183495&#34;&gt;Windows安装虚拟机-Centos7；fortran及Qt4.8.4, BERNESE5.2 linux下安装步骤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4 &lt;a href=&#34;https://blog.csdn.net/weixin_38311046/article/details/99681240&#34;&gt;Ubuntu18.04 搭建 OpenGL+Qt 4.8.6 的开发环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
- https://geoyxd.github.io/posts/install_bernese_software/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>Demo</title>
        <link>https://geoyxd.github.io/posts/demo/</link>
        <pubDate>Mon, 01 Jan 2018 15:10:25 +0800</pubDate>
        
        <guid>https://geoyxd.github.io/posts/demo/</guid>
        <description>GNSS Site https://geoyxd.github.io/posts/demo/ -&lt;h1 id=&#34;建站日记&#34;&gt;建站日记&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;1 博客采用hugo驱动，主题由diary修改,由github托管。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;站点管理&#34;&gt;站点管理&lt;/h1&gt;
&lt;h2 id=&#34;添加文章&#34;&gt;添加文章&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;hugo new posts/my-first-post.md&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;添加页面&#34;&gt;添加页面&lt;/h2&gt;
- https://geoyxd.github.io/posts/demo/ - This is a customized copyright.</description>
        </item>
    
    
    
    
    
    
    
    
  </channel>
</rss> 