<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on GNSS Site</title>
    <link>https://geoyxd.github.io/posts/</link>
    <description>Recent content in Posts on GNSS Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Fri, 28 Jun 2024 22:30:53 +0800</lastBuildDate><atom:link href="https://geoyxd.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C#教程</title>
      <link>https://geoyxd.github.io/posts/c#_%E6%95%99%E7%A8%8B/</link>
      <pubDate>Fri, 28 Jun 2024 22:30:53 +0800</pubDate>
      
      <guid>https://geoyxd.github.io/posts/c#_%E6%95%99%E7%A8%8B/</guid>
      <description>第一章 C#简介 .NET Framework的含义 .NET Framework是Microsoft为开发应用程序而创建的一个具有革命意义的平台
可以运行在多个操作系统上：Windows,Windows Mobile, Linux, macOS
未限制应用程序的类型：桌面应用程序、Windows桌面应用程序（UWP）、云/Web应用程序、Web API、其他各种类型的应用程序
对于Web、云和Web API应用程序，按照定义是多平台的应用程序，因为任何带有Web浏览器的系统都可以访问 可以用于各种语言：C#, C++, F#, JavaScript, Visual Basic, COBOL及其他旧语言
.NET Framework的内容 ``.NET Framwork主要包含一个庞大的代码库`，可以在客户端或服务器语言中通过面向对象编程技术（Object-Oriented Programming, OOP）来使用这些代码。
模块：代码库分为多个不同的模块，这样就可以根据希望得到的结果来选择使用其中的各个部分，一些模块还分为更具体的子模块。主要是为了满足不同的操作系统可以根据各自的特征支持其中的部分或全部模块。
通用类型系统(Common Type System, CTS)：部分.NET Framwork库定义了一些基本类型，类型是数据的一种表达方式，指定最基本类型有助于.NET Framwork的各种语言之间进行交互操作，这称为通用类型系统
.NET 公共语言运行库(Common Language Runtime, CLR)：除了基本类型库之外，``.NET Framwork`还包含.NET公共语言运行库，负责管理用.NET库开发的所有应用程序的执行。
.NET Standard和.NET Core 开源分支：Github上，项目可以被分支并在多个平台上定制运行。.NET Compact Framework和.NET Micro Framework是.NET Framework的分支，每个.NET Framework的分支都有一个具体的需求和目标，正是这些需求和目标催生了对应的分支。
.NET Core是进行跨平台代码开发的最优化解决方案 基类库(Base Class Libraries, BCL)：.NET Framework中包含一组基类库(BCL)，这些库中包含的API用于大多数开发人员需要完成的基本功能。在不同版本的.NET Framework中这些功能的实现是不同的。因此需要开发人员根据应用程序运行的平台，针对对应用程序的不同分支或版本去学习、开发和管理多个基类库(BCL)。分支概念导致了更多.NET Framework版本的出现，因此需要一组基本编程API来处理各种分支和版本。
.NET Standard可以解决上述问题，它是一个类库，它提供的API支持使用了.NET Platform的应用程序的任何分支和版本 使用.NET Framework和.NET Core编写应用程序 实质：使用.NET Framework和.NET Core编写应用程序就是使用支持.NET Framework的任何一种语言使用.NET代码库·编写代码。
IDE：本书使用Visual Studio进行开发，是一种强大的集成开发环境，支持C#（以及托管和非托管C++，Visual Basic和其他一些语言）。这个环境的优点是便于将.</description>
    </item>
    
    <item>
      <title>利用gamit/globk软件计算卫星轨道</title>
      <link>https://geoyxd.github.io/posts/orbit/</link>
      <pubDate>Tue, 12 Jul 2022 15:10:25 +0800</pubDate>
      
      <guid>https://geoyxd.github.io/posts/orbit/</guid>
      <description>利用gamit/globk软件计算卫星轨道 根据卫星的受力受力情况和卫星的运动状态可以建立卫星的运动方程。 实际确定卫星的轨道时通过数值积分得到卫星轨道的数值解。 数值积分需要卫星的初始状态（位置、速度）。初始状态一般通过一系列的观测值约束，经过数据处理，来精化卫星的初始状态值，最终得到高精度的卫星初始运动状态。
一、gamit软件参数设置 与解算地面测站的坐标的方法相比，在解算参数设置上有些区别。
卫星约束为松约束，基准站约束为紧约束。
sestbl.主要得参数设置为： Choice of Experiment = RELAX. | ORBIT Update T/L files = T_AND_L
二、文件准备 test 305 rinex jfs3050.17o chan3050.17o daej3050.17o shao3050.17o suwn3050.17o brdc brdc3050.17o igs igs19733.sp3 table &amp;hellip;&amp;hellip; table文件用sh_setup
sh_setup -yr 2017 305
三、数据处理步骤 1、将rinex、igs、brdc、table中的文件链接到305文件夹，在305下运行sh_makexp,生成session.info等文件
sh_makexp -expt test -orbt igsf -yr 2017 -doy 305 -sess 0 -nav brdc3050.17n -jclock sp3 -apr lfile. -sinfo 30 00 00 2880
2、生成轨道初值G文件
sh_sp3fit -f igs19733.sp3
3、检查G文件
sh_check_sess -sess 305 -type gfile -file &amp;lt;g-file&amp;gt;</description>
    </item>
    
    <item>
      <title>利用gamit/globk软件计算卫星轨道</title>
      <link>https://geoyxd.github.io/posts/%E6%96%B0%E5%BB%BA-markdown/</link>
      <pubDate>Tue, 12 Jul 2022 15:10:25 +0800</pubDate>
      
      <guid>https://geoyxd.github.io/posts/%E6%96%B0%E5%BB%BA-markdown/</guid>
      <description>利用gamit/globk软件计算卫星轨道 根据卫星的受力受力情况和卫星的运动状态可以建立卫星的运动方程。 实际确定卫星的轨道时通过数值积分得到卫星轨道的数值解。 数值积分需要卫星的初始状态（位置、速度）。初始状态一般通过一系列的观测值约束，经过数据处理，来精化卫星的初始状态值，最终得到高精度的卫星初始运动状态。
一、gamit软件参数设置 与解算地面测站的坐标的方法相比，在解算参数设置上有些区别。
卫星约束为松约束，基准站约束为紧约束。
sestbl.主要得参数设置为： Choice of Experiment = RELAX. | ORBIT Update T/L files = T_AND_L
二、文件准备 test 305 rinex jfs3050.17o chan3050.17o daej3050.17o shao3050.17o suwn3050.17o brdc brdc3050.17o igs igs19733.sp3 table &amp;hellip;&amp;hellip; table文件用sh_setup
sh_setup -yr 2017 305
三、数据处理步骤 1、将rinex、igs、brdc、table中的文件链接到305文件夹，在305下运行sh_makexp,生成session.info等文件
sh_makexp -expt test -orbt igsf -yr 2017 -doy 305 -sess 0 -nav brdc3050.17n -jclock sp3 -apr lfile. -sinfo 30 00 00 2880
2、生成轨道初值G文件
sh_sp3fit -f igs19733.sp3
3、检查G文件
sh_check_sess -sess 305 -type gfile -file &amp;lt;g-file&amp;gt;</description>
    </item>
    
    <item>
      <title>Ubuntu23 安装 gamit 软件</title>
      <link>https://geoyxd.github.io/posts/install_gamit_software/</link>
      <pubDate>Sun, 12 Jun 2022 15:10:25 +0800</pubDate>
      
      <guid>https://geoyxd.github.io/posts/install_gamit_software/</guid>
      <description>GAMIT/GLOBK 软件简介 GAMIT/GLOBK 是由麻省理工学院(MIT)、美国加利福尼亚斯克瑞布(SCRIPPS)海洋研究所(SIO)等研制的用于 GNSS 数据处理与分析的软件，经不断改进而成为著名的高精度 GNSS 数据分析和处理软件之一，GAMIT/GLOBK 高精度数据处理软件不但精度高且开放源代码， 可以根据需要进行二次开发。GAMIT 集 GNSS 定位定轨于一体，可以解算卫星轨道和测站坐标以及其它一些辅助参数（如钟差、大气延迟改正参数、整周模糊度参数等）。GLOBK 是利用卡尔曼滤波方法，可对多天和多期观测数据进行平差分析，求出观测点的精确坐标和在不同期观测中各测点的变化速率等，其输入的原始数据为 H 文件或 SINEX 文件。GAMIT/GLOBK 运行于所有 UNIX 及其衍生的操作系统中，目前最新的版本是 GAMIT/GLOBK10.7，其支持 GPS、北斗等导航卫星系统的数据处理。
安装 GAMIT/GLOBK 软件 安装支持 GAMIT 软件包支持的软件。 sudo apt install tcsh sudo apt install csh sudo apt install gcc sudo apt install libx11-dev sudo apt install gfortran sudo apt install make sudo apt install gmt 下载低版本的 gcc gfortran 软件 sudo apt-get install gcc-9
sudo apt-get install gfortran-9
查询安装gcc版本 ls /usr/bin/gcc* ##设置编译器默认使用的版本</description>
    </item>
    
    <item>
      <title>linux mint 安装 bernese 软件</title>
      <link>https://geoyxd.github.io/posts/install_bernese_software/</link>
      <pubDate>Tue, 12 Jun 2018 15:10:25 +0800</pubDate>
      
      <guid>https://geoyxd.github.io/posts/install_bernese_software/</guid>
      <description>GAMIT/GLOBK 软件简介 linux系统编译bernese软件 安装bernese5.2遇到两个坑 一、Qt的安装 二、bernese的按装
1编译平台 1 Ubuntu18.04 2 bernese5.2 2依赖库 $ C $ sudo apt install libxext-dev $ sudo apt install libxtst-dev $ sudo apt install zlib1g-dev sudo apt install g++ sudo apt install gfortran 安装 软件 1 qt 下载 $ tar -zxvf qt-everywhere-opensource-src-4.8.7.tar.gz $ cd qt-everywhere-opensource-src-4.8.7 $ sudo ./configure -release -opensource -static -prefix /usr/local/qt4 $ sudo make $ sudo make install QT编译失败，编译器参数设置不对，应该加上：-std=gnu++98 参数 在终端执行./configure 后，在终端文本中搜索mkspecs或者Build type:
文件夹中mkspecs打开在Build type后面的linux-g++文件夹/qmake.</description>
    </item>
    
    <item>
      <title>Demo</title>
      <link>https://geoyxd.github.io/posts/demo/</link>
      <pubDate>Mon, 01 Jan 2018 15:10:25 +0800</pubDate>
      
      <guid>https://geoyxd.github.io/posts/demo/</guid>
      <description>建站日记 1 博客采用hugo驱动，主题由diary修改,由github托管。 站点管理 添加文章 hugo new posts/my-first-post.md
添加页面 </description>
    </item>
    
  </channel>
</rss>
